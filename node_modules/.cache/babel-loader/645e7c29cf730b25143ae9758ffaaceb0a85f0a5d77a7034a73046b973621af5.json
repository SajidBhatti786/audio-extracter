{"ast":null,"code":"var _jsxFileName = \"D:\\\\Audio extractor\\\\audio-extracter\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioTranscription = () => {\n  _s();\n  const APIKey = \"6bdccc2045804a77b4ac2a5ba59a0e28\";\n  const refreshInterval = 5000;\n  const [transcriptText, setTranscriptText] = useState(\"\");\n  const [transcriptStatus, setTranscriptStatus] = useState(\"pending\");\n  const [uploadURL, setUploadURL] = useState(null);\n  const handleFileChange = async event => {\n    const selectedFile = event.target.files[0];\n    if (selectedFile) {\n      try {\n        const assembly = axios.create({\n          baseURL: \"https://api.assemblyai.com/v2\",\n          headers: {\n            authorization: APIKey,\n            \"content-type\": \"application/json\"\n          }\n        });\n        console.log(\"assembly created successfully\");\n        // Request an upload URL from AssemblyAI\n        const response = await assembly.post(\"/upload-url\");\n        console.log(response);\n        if (response.data.upload_url) {\n          setUploadURL(response.data.upload_url);\n\n          // Upload the selected file to the obtained upload URL\n          const formData = new FormData();\n          formData.append(\"file\", selectedFile);\n          await axios.put(response.data.upload_url, formData);\n        }\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    }\n  };\n  useEffect(() => {\n    if (!uploadURL) {\n      return;\n    }\n    const assembly = axios.create({\n      baseURL: \"https://api.assemblyai.com/v2\",\n      headers: {\n        authorization: APIKey,\n        \"content-type\": \"application/json\"\n      }\n    });\n    const createTranscriptionTask = async () => {\n      try {\n        // Create a transcription task using the upload URL\n        const response = await assembly.post(\"/transcript\", {\n          upload_url: uploadURL\n        });\n\n        // Store the task ID\n        const taskId = response.data.id;\n\n        // Interval for checking transcript completion\n        const checkCompletionInterval = setInterval(async () => {\n          const transcript = await assembly.get(`/transcript/${taskId}`);\n          const transcriptStatus = transcript.data.status;\n          if (transcriptStatus !== \"completed\") {\n            setTranscriptStatus(transcriptStatus);\n          } else {\n            setTranscriptStatus(\"completed\");\n            clearInterval(checkCompletionInterval);\n            setTranscriptText(transcript.data.text);\n          }\n        }, refreshInterval);\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    };\n    createTranscriptionTask();\n  }, [uploadURL]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Transcription Status: \", transcriptStatus]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"audio/*\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), uploadURL && /*#__PURE__*/_jsxDEV(\"audio\", {\n      controls: true,\n      src: uploadURL\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }, this), transcriptStatus === \"completed\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Transcription completed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Your transcribed text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: transcriptText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioTranscription, \"2dqkYiVf+7D0vJSt4JH8PAuVpEk=\");\n_c = AudioTranscription;\nexport default AudioTranscription;\nvar _c;\n$RefreshReg$(_c, \"AudioTranscription\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","AudioTranscription","_s","APIKey","refreshInterval","transcriptText","setTranscriptText","transcriptStatus","setTranscriptStatus","uploadURL","setUploadURL","handleFileChange","event","selectedFile","target","files","assembly","create","baseURL","headers","authorization","console","log","response","post","data","upload_url","formData","FormData","append","put","error","createTranscriptionTask","taskId","id","checkCompletionInterval","setInterval","transcript","get","status","clearInterval","text","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","controls","src","_c","$RefreshReg$"],"sources":["D:/Audio extractor/audio-extracter/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst AudioTranscription = () => {\n  const APIKey = \"6bdccc2045804a77b4ac2a5ba59a0e28\";\n  const refreshInterval = 5000;\n\n  const [transcriptText, setTranscriptText] = useState(\"\");\n  const [transcriptStatus, setTranscriptStatus] = useState(\"pending\");\n  const [uploadURL, setUploadURL] = useState(null);\n\n  const handleFileChange = async (event) => {\n    const selectedFile = event.target.files[0];\n    if (selectedFile) {\n      try {\n        const assembly = axios.create({\n          baseURL: \"https://api.assemblyai.com/v2\",\n          headers: {\n            authorization: APIKey,\n            \"content-type\": \"application/json\",\n          },\n        });\n        console.log(\"assembly created successfully\");\n        // Request an upload URL from AssemblyAI\n        const response = await assembly.post(\"/upload-url\");\n        console.log(response);\n        if (response.data.upload_url) {\n          setUploadURL(response.data.upload_url);\n\n          // Upload the selected file to the obtained upload URL\n          const formData = new FormData();\n          formData.append(\"file\", selectedFile);\n\n          await axios.put(response.data.upload_url, formData);\n        }\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!uploadURL) {\n      return;\n    }\n\n    const assembly = axios.create({\n      baseURL: \"https://api.assemblyai.com/v2\",\n      headers: {\n        authorization: APIKey,\n        \"content-type\": \"application/json\",\n      },\n    });\n\n    const createTranscriptionTask = async () => {\n      try {\n        // Create a transcription task using the upload URL\n        const response = await assembly.post(\"/transcript\", {\n          upload_url: uploadURL,\n        });\n\n        // Store the task ID\n        const taskId = response.data.id;\n\n        // Interval for checking transcript completion\n        const checkCompletionInterval = setInterval(async () => {\n          const transcript = await assembly.get(`/transcript/${taskId}`);\n          const transcriptStatus = transcript.data.status;\n\n          if (transcriptStatus !== \"completed\") {\n            setTranscriptStatus(transcriptStatus);\n          } else {\n            setTranscriptStatus(\"completed\");\n            clearInterval(checkCompletionInterval);\n            setTranscriptText(transcript.data.text);\n          }\n        }, refreshInterval);\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    };\n\n    createTranscriptionTask();\n  }, [uploadURL]);\n\n  return (\n    <div>\n      <h2>Transcription Status: {transcriptStatus}</h2>\n      <input type=\"file\" accept=\"audio/*\" onChange={handleFileChange} />\n      {uploadURL && <audio controls src={uploadURL} />}\n      {transcriptStatus === \"completed\" && (\n        <div>\n          <h2>Transcription completed!</h2>\n          <p>Your transcribed text:</p>\n          <p>{transcriptText}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AudioTranscription;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}