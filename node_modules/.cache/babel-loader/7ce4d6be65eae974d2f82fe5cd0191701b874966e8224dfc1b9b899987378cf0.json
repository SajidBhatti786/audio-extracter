{"ast":null,"code":"var _jsxFileName = \"D:\\\\Audio extractor\\\\audio-extracter\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport MicRecorder from \"mic-recorder-to-mp3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // Mic-Recorder-To-MP3\n  const recorder = useRef(null);\n  const [blobURL, setBlobUrl] = useState(null);\n  const [audioFile, setAudioFile] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n\n  // AssemblyAI API\n  const assembly = axios.create({\n    baseURL: \"https://api.assemblyai.com/v2\",\n    headers: {\n      authorization: \"cd610432583949c2b0404f55a064ec75\",\n      \"content-type\": \"application/json\",\n      \"transfer-encoding\": \"chunked\"\n    }\n  });\n\n  // State variables\n  const [transcript, setTranscript] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    // Declare the recorder object and store it in the ref\n    recorder.current = new MicRecorder({\n      bitRate: 128\n    });\n  }, []);\n  const startRecording = () => {\n    recorder.current.start().then(() => {\n      setIsRecording(true);\n    }).catch(e => console.error(e));\n  };\n  const stopRecording = () => {\n    recorder.current.stop().getMp3().then(([buffer, blob]) => {\n      const file = new File(buffer, \"audio.mp3\", {\n        type: blob.type,\n        lastModified: Date.now()\n      });\n      const newBlobUrl = URL.createObjectURL(blob);\n      setBlobUrl(newBlobUrl);\n      setAudioFile(file);\n      setIsRecording(false);\n    }).catch(e => console.error(e));\n  };\n\n  // Upload the Audio File and retrieve the Upload URL\n  useEffect(() => {\n    if (audioFile) {\n      assembly.post(\"/upload\", audioFile).then(res => {\n        const uploadURL = res.data.upload_url;\n        // Submit the Upload URL to AssemblyAI for transcription\n        assembly.post(\"/transcript\", {\n          audio_url: uploadURL\n        }).then(res => {\n          const transcriptID = res.data.id;\n          checkStatusHandler(transcriptID);\n        }).catch(err => console.error(err));\n      }).catch(err => console.error(err));\n    }\n  }, [audioFile]);\n\n  // Check the status of the Transcript\n  const checkStatusHandler = transcriptID => {\n    setIsLoading(true);\n    const interval = setInterval(async () => {\n      try {\n        const response = await assembly.get(`/transcript/${transcriptID}`);\n        const transcriptData = response.data;\n        if (transcriptData.status === \"completed\") {\n          clearInterval(interval);\n          setIsLoading(false);\n          setTranscript(transcriptData.text);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    }, 1000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"React Speech Recognition App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      src: blobURL,\n      controls: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: isRecording,\n        onClick: startRecording,\n        children: \"START\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !isRecording,\n        onClick: stopRecording,\n        children: \"STOP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Transcribing...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 20\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: transcript\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 45\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"il2X0FkMQTTmAc027zyXmNvryJk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","MicRecorder","jsxDEV","_jsxDEV","App","_s","recorder","blobURL","setBlobUrl","audioFile","setAudioFile","isRecording","setIsRecording","assembly","create","baseURL","headers","authorization","transcript","setTranscript","isLoading","setIsLoading","current","bitRate","startRecording","start","then","catch","e","console","error","stopRecording","stop","getMp3","buffer","blob","file","File","type","lastModified","Date","now","newBlobUrl","URL","createObjectURL","post","res","uploadURL","data","upload_url","audio_url","transcriptID","id","checkStatusHandler","err","interval","setInterval","response","get","transcriptData","status","clearInterval","text","children","fileName","_jsxFileName","lineNumber","columnNumber","src","controls","disabled","onClick","_c","$RefreshReg$"],"sources":["D:/Audio extractor/audio-extracter/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport MicRecorder from \"mic-recorder-to-mp3\";\n\nconst App = () => {\n  // Mic-Recorder-To-MP3\n  const recorder = useRef(null);\n  const [blobURL, setBlobUrl] = useState(null);\n  const [audioFile, setAudioFile] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n\n  // AssemblyAI API\n  const assembly = axios.create({\n    baseURL: \"https://api.assemblyai.com/v2\",\n    headers: {\n      authorization: \"cd610432583949c2b0404f55a064ec75\",\n      \"content-type\": \"application/json\",\n      \"transfer-encoding\": \"chunked\",\n    },\n  });\n\n  // State variables\n  const [transcript, setTranscript] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    // Declare the recorder object and store it in the ref\n    recorder.current = new MicRecorder({ bitRate: 128 });\n  }, []);\n\n  const startRecording = () => {\n    recorder.current\n      .start()\n      .then(() => {\n        setIsRecording(true);\n      })\n      .catch((e) => console.error(e));\n  };\n\n  const stopRecording = () => {\n    recorder.current\n      .stop()\n      .getMp3()\n      .then(([buffer, blob]) => {\n        const file = new File(buffer, \"audio.mp3\", {\n          type: blob.type,\n          lastModified: Date.now(),\n        });\n\n        const newBlobUrl = URL.createObjectURL(blob);\n        setBlobUrl(newBlobUrl);\n        setAudioFile(file);\n        setIsRecording(false);\n      })\n      .catch((e) => console.error(e));\n  };\n\n  // Upload the Audio File and retrieve the Upload URL\n  useEffect(() => {\n    if (audioFile) {\n      assembly\n        .post(\"/upload\", audioFile)\n        .then((res) => {\n          const uploadURL = res.data.upload_url;\n          // Submit the Upload URL to AssemblyAI for transcription\n          assembly\n            .post(\"/transcript\", {\n              audio_url: uploadURL,\n            })\n            .then((res) => {\n              const transcriptID = res.data.id;\n              checkStatusHandler(transcriptID);\n            })\n            .catch((err) => console.error(err));\n        })\n        .catch((err) => console.error(err));\n    }\n  }, [audioFile]);\n\n  // Check the status of the Transcript\n  const checkStatusHandler = (transcriptID) => {\n    setIsLoading(true);\n    const interval = setInterval(async () => {\n      try {\n        const response = await assembly.get(`/transcript/${transcriptID}`);\n        const transcriptData = response.data;\n        if (transcriptData.status === \"completed\") {\n          clearInterval(interval);\n          setIsLoading(false);\n          setTranscript(transcriptData.text);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    }, 1000);\n  };\n\n  return (\n    <div>\n      <h1>React Speech Recognition App</h1>\n      <audio src={blobURL} controls />\n      <div>\n        <button disabled={isRecording} onClick={startRecording}>\n          START\n        </button>\n        <button disabled={!isRecording} onClick={stopRecording}>\n          STOP\n        </button>\n      </div>\n      {isLoading ? <p>Transcribing...</p> : <p>{transcript}</p>}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;EACA,MAAMC,QAAQ,GAAGP,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;;EAErD;EACA,MAAMgB,QAAQ,GAAGb,KAAK,CAACc,MAAM,CAAC;IAC5BC,OAAO,EAAE,+BAA+B;IACxCC,OAAO,EAAE;MACPC,aAAa,EAAE,kCAAkC;MACjD,cAAc,EAAE,kBAAkB;MAClC,mBAAmB,EAAE;IACvB;EACF,CAAC,CAAC;;EAEF;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACuB,SAAS,EAAEC,YAAY,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACd;IACAQ,QAAQ,CAACgB,OAAO,GAAG,IAAIrB,WAAW,CAAC;MAAEsB,OAAO,EAAE;IAAI,CAAC,CAAC;EACtD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3BlB,QAAQ,CAACgB,OAAO,CACbG,KAAK,CAAC,CAAC,CACPC,IAAI,CAAC,MAAM;MACVd,cAAc,CAAC,IAAI,CAAC;IACtB,CAAC,CAAC,CACDe,KAAK,CAAEC,CAAC,IAAKC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC,CAAC;EACnC,CAAC;EAED,MAAMG,aAAa,GAAGA,CAAA,KAAM;IAC1BzB,QAAQ,CAACgB,OAAO,CACbU,IAAI,CAAC,CAAC,CACNC,MAAM,CAAC,CAAC,CACRP,IAAI,CAAC,CAAC,CAACQ,MAAM,EAAEC,IAAI,CAAC,KAAK;MACxB,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACH,MAAM,EAAE,WAAW,EAAE;QACzCI,IAAI,EAAEH,IAAI,CAACG,IAAI;QACfC,YAAY,EAAEC,IAAI,CAACC,GAAG,CAAC;MACzB,CAAC,CAAC;MAEF,MAAMC,UAAU,GAAGC,GAAG,CAACC,eAAe,CAACT,IAAI,CAAC;MAC5C3B,UAAU,CAACkC,UAAU,CAAC;MACtBhC,YAAY,CAAC0B,IAAI,CAAC;MAClBxB,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC,CAAC,CACDe,KAAK,CAAEC,CAAC,IAAKC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC,CAAC;EACnC,CAAC;;EAED;EACA9B,SAAS,CAAC,MAAM;IACd,IAAIW,SAAS,EAAE;MACbI,QAAQ,CACLgC,IAAI,CAAC,SAAS,EAAEpC,SAAS,CAAC,CAC1BiB,IAAI,CAAEoB,GAAG,IAAK;QACb,MAAMC,SAAS,GAAGD,GAAG,CAACE,IAAI,CAACC,UAAU;QACrC;QACApC,QAAQ,CACLgC,IAAI,CAAC,aAAa,EAAE;UACnBK,SAAS,EAAEH;QACb,CAAC,CAAC,CACDrB,IAAI,CAAEoB,GAAG,IAAK;UACb,MAAMK,YAAY,GAAGL,GAAG,CAACE,IAAI,CAACI,EAAE;UAChCC,kBAAkB,CAACF,YAAY,CAAC;QAClC,CAAC,CAAC,CACDxB,KAAK,CAAE2B,GAAG,IAAKzB,OAAO,CAACC,KAAK,CAACwB,GAAG,CAAC,CAAC;MACvC,CAAC,CAAC,CACD3B,KAAK,CAAE2B,GAAG,IAAKzB,OAAO,CAACC,KAAK,CAACwB,GAAG,CAAC,CAAC;IACvC;EACF,CAAC,EAAE,CAAC7C,SAAS,CAAC,CAAC;;EAEf;EACA,MAAM4C,kBAAkB,GAAIF,YAAY,IAAK;IAC3C9B,YAAY,CAAC,IAAI,CAAC;IAClB,MAAMkC,QAAQ,GAAGC,WAAW,CAAC,YAAY;MACvC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAM5C,QAAQ,CAAC6C,GAAG,CAAE,eAAcP,YAAa,EAAC,CAAC;QAClE,MAAMQ,cAAc,GAAGF,QAAQ,CAACT,IAAI;QACpC,IAAIW,cAAc,CAACC,MAAM,KAAK,WAAW,EAAE;UACzCC,aAAa,CAACN,QAAQ,CAAC;UACvBlC,YAAY,CAAC,KAAK,CAAC;UACnBF,aAAa,CAACwC,cAAc,CAACG,IAAI,CAAC;QACpC;MACF,CAAC,CAAC,OAAOR,GAAG,EAAE;QACZzB,OAAO,CAACC,KAAK,CAACwB,GAAG,CAAC;MACpB;IACF,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,oBACEnD,OAAA;IAAA4D,QAAA,gBACE5D,OAAA;MAAA4D,QAAA,EAAI;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrChE,OAAA;MAAOiE,GAAG,EAAE7D,OAAQ;MAAC8D,QAAQ;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChChE,OAAA;MAAA4D,QAAA,gBACE5D,OAAA;QAAQmE,QAAQ,EAAE3D,WAAY;QAAC4D,OAAO,EAAE/C,cAAe;QAAAuC,QAAA,EAAC;MAExD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACThE,OAAA;QAAQmE,QAAQ,EAAE,CAAC3D,WAAY;QAAC4D,OAAO,EAAExC,aAAc;QAAAgC,QAAA,EAAC;MAExD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EACL/C,SAAS,gBAAGjB,OAAA;MAAA4D,QAAA,EAAG;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAAGhE,OAAA;MAAA4D,QAAA,EAAI7C;IAAU;MAAA8C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtD,CAAC;AAEV,CAAC;AAAC9D,EAAA,CA5GID,GAAG;AAAAoE,EAAA,GAAHpE,GAAG;AA8GT,eAAeA,GAAG;AAAC,IAAAoE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}