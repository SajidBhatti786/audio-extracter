{"ast":null,"code":"var _jsxFileName = \"D:\\\\Audio extractor\\\\audio-extracter\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const assembly = axios.create({\n    baseURL: \"https://api.assemblyai.com/v2\",\n    headers: {\n      authorization: \"cd610432583949c2b0404f55a064ec75\",\n      \"content-type\": \"application/json\",\n      \"transfer-encoding\": \"chunked\"\n    }\n  });\n  const [transcript, setTranscript] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const handleFileChange = async event => {\n    // Reset messages\n    setMessage(\"Uploading file...\");\n    setError(\"\");\n    const selectedFile = event.target.files[0];\n    if (!selectedFile) {\n      setError(\"Please select an audio file.\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"audio\", selectedFile);\n    try {\n      const uploadResponse = await assembly.post(\"/upload\", selectedFile);\n      if (uploadResponse.status === 200) {\n        const uploadURL = uploadResponse.data.upload_url;\n        setMessage(\"Transcribing...\");\n        submitTranscription(uploadURL);\n      } else {\n        setError(\"File upload to AssemblyAI failed.\");\n      }\n    } catch (error) {\n      setError(\"An error occurred while uploading the file.\");\n    }\n  };\n  const submitTranscription = uploadURL => {\n    setIsLoading(true);\n    assembly.post(\"/transcript\", {\n      audio_url: uploadURL,\n      language_detection: true\n    }).then(response => {\n      const transcriptID = response.data.id;\n      setMessage(\"Processing...\");\n      checkTranscriptionStatus(transcriptID);\n    }).catch(error => {\n      setError(\"Transcription request to AssemblyAI failed.\");\n    });\n  };\n  const checkTranscriptionStatus = transcriptID => {\n    const interval = setInterval(async () => {\n      try {\n        const response = await assembly.get(`/transcript/${transcriptID}`);\n        const transcriptData = response.data;\n        if (transcriptData.status === \"completed\") {\n          clearInterval(interval);\n          setIsLoading(false);\n          setMessage(\"Transcription completed!\");\n          setTranscript(transcriptData.text);\n        }\n      } catch (error) {\n        setError(\"An error occurred while checking transcription status.\");\n      }\n    }, 1000);\n  };\n  const downloadTranscript = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([transcript], {\n      type: \"text/plain\"\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = \"transcript.txt\";\n    element.click();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Audio Transcription App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"audio/*\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 20\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: transcript\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 39\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }, this), transcript && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: downloadTranscript,\n      children: \"Download Transcript\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"W0pvCm95kenMBBAJuVO8AiaSpsU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","assembly","create","baseURL","headers","authorization","transcript","setTranscript","isLoading","setIsLoading","message","setMessage","error","setError","handleFileChange","event","selectedFile","target","files","formData","FormData","append","uploadResponse","post","status","uploadURL","data","upload_url","submitTranscription","audio_url","language_detection","then","response","transcriptID","id","checkTranscriptionStatus","catch","interval","setInterval","get","transcriptData","clearInterval","text","downloadTranscript","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","click","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","className","onClick","_c","$RefreshReg$"],"sources":["D:/Audio extractor/audio-extracter/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nconst App = () => {\n  const assembly = axios.create({\n    baseURL: \"https://api.assemblyai.com/v2\",\n    headers: {\n      authorization: \"cd610432583949c2b0404f55a064ec75\",\n      \"content-type\": \"application/json\",\n      \"transfer-encoding\": \"chunked\",\n    },\n  });\n\n  const [transcript, setTranscript] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const handleFileChange = async (event) => {\n    // Reset messages\n    setMessage(\"Uploading file...\");\n    setError(\"\");\n\n    const selectedFile = event.target.files[0];\n\n    if (!selectedFile) {\n      setError(\"Please select an audio file.\");\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"audio\", selectedFile);\n\n    try {\n      const uploadResponse = await assembly.post(\"/upload\", selectedFile);\n\n      if (uploadResponse.status === 200) {\n        const uploadURL = uploadResponse.data.upload_url;\n\n        setMessage(\"Transcribing...\");\n        submitTranscription(uploadURL);\n      } else {\n        setError(\"File upload to AssemblyAI failed.\");\n      }\n    } catch (error) {\n      setError(\"An error occurred while uploading the file.\");\n    }\n  };\n\n  const submitTranscription = (uploadURL) => {\n    setIsLoading(true);\n    assembly\n      .post(\"/transcript\", { audio_url: uploadURL, language_detection: true })\n      .then((response) => {\n        const transcriptID = response.data.id;\n\n        setMessage(\"Processing...\");\n        checkTranscriptionStatus(transcriptID);\n      })\n      .catch((error) => {\n        setError(\"Transcription request to AssemblyAI failed.\");\n      });\n  };\n\n  const checkTranscriptionStatus = (transcriptID) => {\n    const interval = setInterval(async () => {\n      try {\n        const response = await assembly.get(`/transcript/${transcriptID}`);\n        const transcriptData = response.data;\n\n        if (transcriptData.status === \"completed\") {\n          clearInterval(interval);\n          setIsLoading(false);\n          setMessage(\"Transcription completed!\");\n          setTranscript(transcriptData.text);\n        }\n      } catch (error) {\n        setError(\"An error occurred while checking transcription status.\");\n      }\n    }, 1000);\n  };\n\n  const downloadTranscript = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([transcript], { type: \"text/plain\" });\n    element.href = URL.createObjectURL(file);\n    element.download = \"transcript.txt\";\n    element.click();\n  };\n\n  return (\n    <div>\n      <h1>Audio Transcription App</h1>\n      <input type=\"file\" accept=\"audio/*\" onChange={handleFileChange} />\n      {isLoading ? <p>{message}</p> : <p>{transcript}</p>}\n      {error && <p className=\"error\">{error}</p>}\n      {transcript && (\n        <button onClick={downloadTranscript}>Download Transcript</button>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}