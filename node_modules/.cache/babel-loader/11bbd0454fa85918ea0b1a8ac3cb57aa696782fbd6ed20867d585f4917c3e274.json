{"ast":null,"code":"var _jsxFileName = \"D:\\\\Audio extractor\\\\audio-extracter\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [transcription, setTranscription] = useState(\"\");\n  const [file, setFile] = useState(null);\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n  const transcribeAndDownload = async () => {\n    if (!file) {\n      alert(\"Please select a file to transcribe.\");\n      return;\n    }\n    try {\n      // Create a FormData object to send the file to AssemblyAI\n      const formData = new FormData();\n      formData.append(\"file\", file);\n\n      // Make a POST request to the AssemblyAI API\n      const response = await axios.post(\"https://api.assemblyai.com/v2/upload\", formData, {\n        headers: {\n          authorization: \"YOUR_API_KEY\",\n          // Replace with your AssemblyAI API key\n          \"content-type\": \"multipart/form-data\"\n        }\n      });\n      const {\n        id\n      } = response.data;\n\n      // Poll AssemblyAI for the transcription\n      let completed = false;\n      let transcript = \"\";\n      while (!completed) {\n        const transcriptResponse = await axios.get(`https://api.assemblyai.com/v2/transcript/${id}`, {\n          headers: {\n            authorization: \"YOUR_API_KEY\" // Replace with your AssemblyAI API key\n          }\n        });\n\n        if (transcriptResponse.data.status === \"completed\") {\n          completed = true;\n          transcript = transcriptResponse.data.text;\n        } else {\n          // Sleep or use a timer before the next poll (e.g., setTimeout)\n        }\n      }\n      setTranscription(transcript);\n\n      // Create a Blob with the transcribed text and trigger a download\n      const blob = new Blob([transcription], {\n        type: \"text/plain\"\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"transcription.txt\";\n      a.click();\n    } catch (error) {\n      console.error(\"Transcription error:\", error);\n      alert(\"An error occurred during transcription.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Audio Transcription App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".mp3\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: transcribeAndDownload,\n      children: \"Transcribe & Download\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: transcription && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Transcribed Text:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: transcription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"KxBHFn8KDajpmq/DDEMD7tOzHjs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","transcription","setTranscription","file","setFile","handleFileChange","event","target","files","transcribeAndDownload","alert","formData","FormData","append","response","post","headers","authorization","id","data","completed","transcript","transcriptResponse","get","status","text","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","click","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","onClick","_c","$RefreshReg$"],"sources":["D:/Audio extractor/audio-extracter/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nconst App = () => {\n  const [transcription, setTranscription] = useState(\"\");\n  const [file, setFile] = useState(null);\n\n  const handleFileChange = (event) => {\n    setFile(event.target.files[0]);\n  };\n\n  const transcribeAndDownload = async () => {\n    if (!file) {\n      alert(\"Please select a file to transcribe.\");\n      return;\n    }\n\n    try {\n      // Create a FormData object to send the file to AssemblyAI\n      const formData = new FormData();\n      formData.append(\"file\", file);\n\n      // Make a POST request to the AssemblyAI API\n      const response = await axios.post(\n        \"https://api.assemblyai.com/v2/upload\",\n        formData,\n        {\n          headers: {\n            authorization: \"YOUR_API_KEY\", // Replace with your AssemblyAI API key\n            \"content-type\": \"multipart/form-data\",\n          },\n        }\n      );\n\n      const { id } = response.data;\n\n      // Poll AssemblyAI for the transcription\n      let completed = false;\n      let transcript = \"\";\n\n      while (!completed) {\n        const transcriptResponse = await axios.get(\n          `https://api.assemblyai.com/v2/transcript/${id}`,\n          {\n            headers: {\n              authorization: \"YOUR_API_KEY\", // Replace with your AssemblyAI API key\n            },\n          }\n        );\n\n        if (transcriptResponse.data.status === \"completed\") {\n          completed = true;\n          transcript = transcriptResponse.data.text;\n        } else {\n          // Sleep or use a timer before the next poll (e.g., setTimeout)\n        }\n      }\n\n      setTranscription(transcript);\n\n      // Create a Blob with the transcribed text and trigger a download\n      const blob = new Blob([transcription], { type: \"text/plain\" });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"transcription.txt\";\n      a.click();\n    } catch (error) {\n      console.error(\"Transcription error:\", error);\n      alert(\"An error occurred during transcription.\");\n    }\n  };\n\n  return (\n    <div>\n      <h1>Audio Transcription App</h1>\n      <input type=\"file\" accept=\".mp3\" onChange={handleFileChange} />\n      <button onClick={transcribeAndDownload}>Transcribe & Download</button>\n      <div>\n        {transcription && (\n          <div>\n            <h2>Transcribed Text:</h2>\n            <p>{transcription}</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}