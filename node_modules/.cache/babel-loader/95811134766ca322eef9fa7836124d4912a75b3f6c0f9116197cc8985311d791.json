{"ast":null,"code":"var _jsxFileName = \"D:\\\\Audio extractor\\\\audio-extracter\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport AssemblyAI from \"assemblyai\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [transcription, setTranscription] = useState(\"\");\n  const [file, setFile] = useState(null);\n  const client = new AssemblyAI({\n    apiKey: \"YOUR_API_KEY\" // Replace with your AssemblyAI API key\n  });\n\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n  const transcribeAndDownload = async () => {\n    if (!file) {\n      alert(\"Please select a file to transcribe.\");\n      return;\n    }\n    try {\n      // Upload the selected file to AssemblyAI for transcription\n      const response = await client.transcribe({\n        file\n      });\n      const transcript = await response.getTranscript();\n      setTranscription(transcript.text);\n\n      // Create a Blob with the transcribed text and trigger a download\n      const blob = new Blob([transcription], {\n        type: \"text/plain\"\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"transcription.txt\";\n      a.click();\n    } catch (error) {\n      console.error(\"Transcription error:\", error);\n      alert(\"An error occurred during transcription.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Audio Transcription App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".mp3\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: transcribeAndDownload,\n      children: \"Transcribe & Download\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: transcription && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Transcribed Text:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: transcription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"KxBHFn8KDajpmq/DDEMD7tOzHjs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","AssemblyAI","jsxDEV","_jsxDEV","App","_s","transcription","setTranscription","file","setFile","client","apiKey","handleFileChange","event","target","files","transcribeAndDownload","alert","response","transcribe","transcript","getTranscript","text","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","click","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","onClick","_c","$RefreshReg$"],"sources":["D:/Audio extractor/audio-extracter/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport AssemblyAI from \"assemblyai\";\n\nconst App = () => {\n  const [transcription, setTranscription] = useState(\"\");\n  const [file, setFile] = useState(null);\n  const client = new AssemblyAI({\n    apiKey: \"YOUR_API_KEY\", // Replace with your AssemblyAI API key\n  });\n\n  const handleFileChange = (event) => {\n    setFile(event.target.files[0]);\n  };\n\n  const transcribeAndDownload = async () => {\n    if (!file) {\n      alert(\"Please select a file to transcribe.\");\n      return;\n    }\n\n    try {\n      // Upload the selected file to AssemblyAI for transcription\n      const response = await client.transcribe({ file });\n      const transcript = await response.getTranscript();\n      setTranscription(transcript.text);\n\n      // Create a Blob with the transcribed text and trigger a download\n      const blob = new Blob([transcription], { type: \"text/plain\" });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"transcription.txt\";\n      a.click();\n    } catch (error) {\n      console.error(\"Transcription error:\", error);\n      alert(\"An error occurred during transcription.\");\n    }\n  };\n\n  return (\n    <div>\n      <h1>Audio Transcription App</h1>\n      <input type=\"file\" accept=\".mp3\" onChange={handleFileChange} />\n      <button onClick={transcribeAndDownload}>Transcribe & Download</button>\n      <div>\n        {transcription && (\n          <div>\n            <h2>Transcribed Text:</h2>\n            <p>{transcription}</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}