{"ast":null,"code":"var _jsxFileName = \"D:\\\\Audio extractor\\\\audio-extracter\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst assemblyApi = axios.create({\n  baseURL: \"https://api.assemblyai.com/v2\",\n  headers: {\n    authorization: \"YOUR_API_KEY_HERE\",\n    // Replace with your actual API key\n    \"content-type\": \"application/json\"\n  }\n});\nconst initialState = {\n  url: null,\n  blob: null,\n  chunks: null,\n  duration: {\n    h: 0,\n    m: 0,\n    s: 0\n  }\n};\nfunction App() {\n  _s();\n  const [audioDetails, setAudioDetails] = useState(initialState);\n  const [transcript, setTranscript] = useState({\n    id: \"\",\n    text: \"\",\n    status: \"\"\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (transcript.id && transcript.status !== \"completed\" && isLoading) {\n        try {\n          const {\n            data: transcriptData\n          } = await assemblyApi.get(`/transcript/${transcript.id}`);\n          setTranscript({\n            ...transcript,\n            ...transcriptData\n          });\n        } catch (err) {\n          console.error(err);\n        }\n      } else {\n        setIsLoading(false);\n        clearInterval(interval);\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [isLoading, transcript]);\n  const handleAudioStop = data => {\n    setAudioDetails(data);\n  };\n  const handleReset = () => {\n    setAudioDetails({\n      ...initialState\n    });\n    setTranscript({\n      id: \"\",\n      text: \"\",\n      status: \"\"\n    });\n  };\n  const handleAudioUpload = async audioFile => {\n    setIsLoading(true);\n    const {\n      data: uploadResponse\n    } = await assemblyApi.post(\"/upload\", audioFile);\n    const {\n      data\n    } = await assemblyApi.post(\"/transcript\", {\n      audio_url: uploadResponse.upload_url,\n      speaker_labels: true,\n      sentiment_analysis: true,\n      entity_detection: true,\n      iab_categories: true\n    });\n    setTranscript({\n      id: data.id,\n      text: \"\",\n      status: data.status\n    });\n  };\n  const handleTranscribeAndDownload = () => {\n    setIsLoading(true);\n    if (transcript.id) {\n      // Check if the transcription is completed\n      if (transcript.status === \"completed\") {\n        // Download the transcribed text as a .txt file\n        const element = document.createElement(\"a\");\n        const file = new Blob([transcript.text], {\n          type: \"text/plain\"\n        });\n        element.href = URL.createObjectURL(file);\n        element.download = \"transcript.txt\";\n        element.click();\n      } else {\n        console.error(\"Transcription is not yet completed.\");\n      }\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      fontSize: \"xl\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        minHeight: \"50vh\",\n        padding: \"30px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"8px\"\n        },\n        children: transcript.text && transcript.status === \"completed\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Transcription:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: transcript.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Transcription not yet completed.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleTranscribeAndDownload,\n          children: \"Transcribe and Download\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"300px\",\n          paddingTop: \"-1\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"3WfGf0URz9NICl4b9hyy3pwNu9o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","assemblyApi","create","baseURL","headers","authorization","initialState","url","blob","chunks","duration","h","m","s","App","_s","audioDetails","setAudioDetails","transcript","setTranscript","id","text","status","isLoading","setIsLoading","interval","setInterval","data","transcriptData","get","err","console","error","clearInterval","handleAudioStop","handleReset","handleAudioUpload","audioFile","uploadResponse","post","audio_url","upload_url","speaker_labels","sentiment_analysis","entity_detection","iab_categories","handleTranscribeAndDownload","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","click","style","textAlign","fontSize","children","minHeight","padding","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","onClick","width","paddingTop","_c","$RefreshReg$"],"sources":["D:/Audio extractor/audio-extracter/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst assemblyApi = axios.create({\n  baseURL: \"https://api.assemblyai.com/v2\",\n  headers: {\n    authorization: \"YOUR_API_KEY_HERE\", // Replace with your actual API key\n    \"content-type\": \"application/json\",\n  },\n});\n\nconst initialState = {\n  url: null,\n  blob: null,\n  chunks: null,\n  duration: {\n    h: 0,\n    m: 0,\n    s: 0,\n  },\n};\n\nfunction App() {\n  const [audioDetails, setAudioDetails] = useState(initialState);\n  const [transcript, setTranscript] = useState({\n    id: \"\",\n    text: \"\",\n    status: \"\",\n  });\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (transcript.id && transcript.status !== \"completed\" && isLoading) {\n        try {\n          const { data: transcriptData } = await assemblyApi.get(\n            `/transcript/${transcript.id}`\n          );\n          setTranscript({ ...transcript, ...transcriptData });\n        } catch (err) {\n          console.error(err);\n        }\n      } else {\n        setIsLoading(false);\n        clearInterval(interval);\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [isLoading, transcript]);\n\n  const handleAudioStop = (data) => {\n    setAudioDetails(data);\n  };\n\n  const handleReset = () => {\n    setAudioDetails({ ...initialState });\n    setTranscript({ id: \"\", text: \"\", status: \"\" });\n  };\n\n  const handleAudioUpload = async (audioFile) => {\n    setIsLoading(true);\n\n    const { data: uploadResponse } = await assemblyApi.post(\n      \"/upload\",\n      audioFile\n    );\n\n    const { data } = await assemblyApi.post(\"/transcript\", {\n      audio_url: uploadResponse.upload_url,\n      speaker_labels: true,\n      sentiment_analysis: true,\n      entity_detection: true,\n      iab_categories: true,\n    });\n\n    setTranscript({ id: data.id, text: \"\", status: data.status });\n  };\n\n  const handleTranscribeAndDownload = () => {\n    setIsLoading(true);\n\n    if (transcript.id) {\n      // Check if the transcription is completed\n      if (transcript.status === \"completed\") {\n        // Download the transcribed text as a .txt file\n        const element = document.createElement(\"a\");\n        const file = new Blob([transcript.text], { type: \"text/plain\" });\n        element.href = URL.createObjectURL(file);\n        element.download = \"transcript.txt\";\n        element.click();\n      } else {\n        console.error(\"Transcription is not yet completed.\");\n      }\n\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div style={{ textAlign: \"center\", fontSize: \"xl\" }}>\n      <div\n        style={{\n          minHeight: \"50vh\",\n          padding: \"30px\",\n        }}\n      >\n        <div style={{ marginBottom: \"8px\" }}>\n          {transcript.text && transcript.status === \"completed\" ? (\n            <div>\n              <p>Transcription:</p>\n              <p>{transcript.text}</p>\n            </div>\n          ) : (\n            <p>Transcription not yet completed.</p>\n          )}\n        </div>\n\n        <div>\n          <button onClick={handleTranscribeAndDownload}>\n            Transcribe and Download\n          </button>\n        </div>\n\n        <div style={{ width: \"300px\", paddingTop: \"-1\" }}>\n          {/* Your Recorder component */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}