{"ast":null,"code":"var _jsxFileName = \"D:\\\\Audio extractor\\\\audio-extracter\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { saveAs } from \"file-saver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TranscriptionApp() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [transcription, setTranscription] = useState(\"\");\n  const handleFileUpload = e => {\n    setFile(e.target.files[0]);\n  };\n  const handleTranscribeAndDownload = async () => {\n    try {\n      // Step 1: Upload the file to Assembly AI\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      const response = await axios.post(\"https://api.assemblyai.com/v2/upload\", formData, {\n        headers: {\n          authorization: \"6bdccc2045804a77b4ac2a5ba59a0e28\",\n          \"content-type\": \"multipart/form-data\"\n        }\n      });\n      const uploadId = response.data.id;\n\n      // Step 2: Initiate transcription\n      const transcribeResponse = await axios.post(\"https://api.assemblyai.com/v2/upload/\" + uploadId + \"/transcribe\", {}, {\n        headers: {\n          authorization: \"6bdccc2045804a77b4ac2a5ba59a0e28\"\n        }\n      });\n      const transcriptId = transcribeResponse.data.id;\n\n      // Step 3: Wait for transcription to complete\n      let status = \"\";\n      while (status !== \"completed\") {\n        const statusResponse = await axios.get(\"https://api.assemblyai.com/v2/transcript/\" + transcriptId, {\n          headers: {\n            authorization: \"6bdccc2045804a77b4ac2a5ba59a0e28\"\n          }\n        });\n        status = statusResponse.data.status;\n      }\n\n      // Step 4: Download the transcript\n      const transcriptResponse = await axios.get(\"https://api.assemblyai.com/v2/transcript/\" + transcriptId + \"/txt\", {\n        headers: {\n          authorization: \"6bdccc2045804a77b4ac2a5ba59a0e28\"\n        },\n        responseType: \"blob\"\n      });\n\n      // Step 5: Save the transcription as a .txt file and display it\n      const blob = new Blob([transcriptResponse.data], {\n        type: \"text/plain\"\n      });\n      saveAs(blob, \"transcription.txt\");\n      const transcriptText = await transcriptResponse.data.text();\n      setTranscription(transcriptText);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".wav, .mp3\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleTranscribeAndDownload,\n      children: \"Transcribe and Download\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Transcription Output:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: transcription\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(TranscriptionApp, \"bImQhrsrg26gmmwNcYbjNQNdaYM=\");\n_c = TranscriptionApp;\nexport default TranscriptionApp;\nvar _c;\n$RefreshReg$(_c, \"TranscriptionApp\");","map":{"version":3,"names":["React","useState","axios","saveAs","jsxDEV","_jsxDEV","TranscriptionApp","_s","file","setFile","transcription","setTranscription","handleFileUpload","e","target","files","handleTranscribeAndDownload","formData","FormData","append","response","post","headers","authorization","uploadId","data","id","transcribeResponse","transcriptId","status","statusResponse","get","transcriptResponse","responseType","blob","Blob","type","transcriptText","text","error","console","children","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/Audio extractor/audio-extracter/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { saveAs } from \"file-saver\";\n\nfunction TranscriptionApp() {\n  const [file, setFile] = useState(null);\n  const [transcription, setTranscription] = useState(\"\");\n\n  const handleFileUpload = (e) => {\n    setFile(e.target.files[0]);\n  };\n\n  const handleTranscribeAndDownload = async () => {\n    try {\n      // Step 1: Upload the file to Assembly AI\n      const formData = new FormData();\n      formData.append(\"file\", file);\n\n      const response = await axios.post(\n        \"https://api.assemblyai.com/v2/upload\",\n        formData,\n        {\n          headers: {\n            authorization: \"6bdccc2045804a77b4ac2a5ba59a0e28\",\n            \"content-type\": \"multipart/form-data\",\n          },\n        }\n      );\n\n      const uploadId = response.data.id;\n\n      // Step 2: Initiate transcription\n      const transcribeResponse = await axios.post(\n        \"https://api.assemblyai.com/v2/upload/\" + uploadId + \"/transcribe\",\n        {},\n        {\n          headers: {\n            authorization: \"6bdccc2045804a77b4ac2a5ba59a0e28\",\n          },\n        }\n      );\n\n      const transcriptId = transcribeResponse.data.id;\n\n      // Step 3: Wait for transcription to complete\n      let status = \"\";\n      while (status !== \"completed\") {\n        const statusResponse = await axios.get(\n          \"https://api.assemblyai.com/v2/transcript/\" + transcriptId,\n          {\n            headers: {\n              authorization: \"6bdccc2045804a77b4ac2a5ba59a0e28\",\n            },\n          }\n        );\n        status = statusResponse.data.status;\n      }\n\n      // Step 4: Download the transcript\n      const transcriptResponse = await axios.get(\n        \"https://api.assemblyai.com/v2/transcript/\" + transcriptId + \"/txt\",\n        {\n          headers: {\n            authorization: \"6bdccc2045804a77b4ac2a5ba59a0e28\",\n          },\n          responseType: \"blob\",\n        }\n      );\n\n      // Step 5: Save the transcription as a .txt file and display it\n      const blob = new Blob([transcriptResponse.data], { type: \"text/plain\" });\n      saveAs(blob, \"transcription.txt\");\n      const transcriptText = await transcriptResponse.data.text();\n\n      setTranscription(transcriptText);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <div>\n      <input type=\"file\" accept=\".wav, .mp3\" onChange={handleFileUpload} />\n      <button onClick={handleTranscribeAndDownload}>\n        Transcribe and Download\n      </button>\n      <div>\n        <h2>Transcription Output:</h2>\n        <pre>{transcription}</pre>\n      </div>\n    </div>\n  );\n}\n\nexport default TranscriptionApp;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}