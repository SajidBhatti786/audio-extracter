{"ast":null,"code":"var _jsxFileName = \"D:\\\\Audio extractor\\\\audio-extracter\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\n// ... (other imports and code)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioTranscription = () => {\n  _s();\n  const APIKey = \"6bdccc2045804a77b4ac2a5ba59a0e28\";\n  const refreshInterval = 5000;\n  const [transcriptText, setTranscriptText] = useState(\"\");\n  const [transcriptStatus, setTranscriptStatus] = useState(\"pending\");\n  const [uploadURL, setUploadURL] = useState(null);\n  const handleFileChange = event => {\n    const selectedFile = event.target.files[0];\n    if (selectedFile) {\n      // Create an object URL for the selected file\n      setUploadURL(URL.createObjectURL(selectedFile));\n    }\n  };\n  useEffect(() => {\n    if (!uploadURL) {\n      return;\n    }\n    const assembly = axios.create({\n      baseURL: \"https://api.assemblyai.com/v2\",\n      headers: {\n        authorization: APIKey,\n        \"content-type\": \"application/json\"\n      }\n    });\n    const createTranscriptionTask = async () => {\n      try {\n        // Create a transcription task using the upload URL\n        const response = await assembly.post(\"/transcript\", {\n          upload_url: uploadURL\n        });\n\n        // Store the task ID\n        const taskId = response.data.id;\n\n        // Interval for checking transcript completion\n        const checkCompletionInterval = setInterval(async () => {\n          const transcript = await assembly.get(`/transcript/${taskId}`);\n          const transcriptStatus = transcript.data.status;\n          if (transcriptStatus !== \"completed\") {\n            setTranscriptStatus(transcriptStatus);\n          } else {\n            setTranscriptStatus(\"completed\");\n            clearInterval(checkCompletionInterval);\n            setTranscriptText(transcript.data.text);\n          }\n        }, refreshInterval);\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    };\n    createTranscriptionTask();\n  }, [uploadURL]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Transcription Status: \", transcriptStatus]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"audio/*\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), uploadURL && /*#__PURE__*/_jsxDEV(\"audio\", {\n      controls: true,\n      src: uploadURL\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }, this), transcriptStatus === \"completed\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Transcription completed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Your transcribed text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: transcriptText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioTranscription, \"2dqkYiVf+7D0vJSt4JH8PAuVpEk=\");\n_c = AudioTranscription;\nexport default AudioTranscription;\nvar _c;\n$RefreshReg$(_c, \"AudioTranscription\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","AudioTranscription","_s","APIKey","refreshInterval","transcriptText","setTranscriptText","transcriptStatus","setTranscriptStatus","uploadURL","setUploadURL","handleFileChange","event","selectedFile","target","files","URL","createObjectURL","assembly","create","baseURL","headers","authorization","createTranscriptionTask","response","post","upload_url","taskId","data","id","checkCompletionInterval","setInterval","transcript","get","status","clearInterval","text","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","controls","src","_c","$RefreshReg$"],"sources":["D:/Audio extractor/audio-extracter/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\n// ... (other imports and code)\n\nconst AudioTranscription = () => {\n  const APIKey = \"6bdccc2045804a77b4ac2a5ba59a0e28\";\n  const refreshInterval = 5000;\n\n  const [transcriptText, setTranscriptText] = useState(\"\");\n  const [transcriptStatus, setTranscriptStatus] = useState(\"pending\");\n  const [uploadURL, setUploadURL] = useState(null);\n\n  const handleFileChange = (event) => {\n    const selectedFile = event.target.files[0];\n    if (selectedFile) {\n      // Create an object URL for the selected file\n      setUploadURL(URL.createObjectURL(selectedFile));\n    }\n  };\n\n  useEffect(() => {\n    if (!uploadURL) {\n      return;\n    }\n\n    const assembly = axios.create({\n      baseURL: \"https://api.assemblyai.com/v2\",\n      headers: {\n        authorization: APIKey,\n        \"content-type\": \"application/json\",\n      },\n    });\n\n    const createTranscriptionTask = async () => {\n      try {\n        // Create a transcription task using the upload URL\n        const response = await assembly.post(\"/transcript\", {\n          upload_url: uploadURL,\n        });\n\n        // Store the task ID\n        const taskId = response.data.id;\n\n        // Interval for checking transcript completion\n        const checkCompletionInterval = setInterval(async () => {\n          const transcript = await assembly.get(`/transcript/${taskId}`);\n          const transcriptStatus = transcript.data.status;\n\n          if (transcriptStatus !== \"completed\") {\n            setTranscriptStatus(transcriptStatus);\n          } else {\n            setTranscriptStatus(\"completed\");\n            clearInterval(checkCompletionInterval);\n            setTranscriptText(transcript.data.text);\n          }\n        }, refreshInterval);\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    };\n\n    createTranscriptionTask();\n  }, [uploadURL]);\n\n  return (\n    <div>\n      <h2>Transcription Status: {transcriptStatus}</h2>\n      <input type=\"file\" accept=\"audio/*\" onChange={handleFileChange} />\n      {uploadURL && <audio controls src={uploadURL} />}\n      {transcriptStatus === \"completed\" && (\n        <div>\n          <h2>Transcription completed!</h2>\n          <p>Your transcribed text:</p>\n          <p>{transcriptText}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AudioTranscription;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}