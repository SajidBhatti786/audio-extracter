{"ast":null,"code":"import _regeneratorRuntime from\"D:/Audio extractor/audio-extracter/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"D:/Audio extractor/audio-extracter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"D:/Audio extractor/audio-extracter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var App=function App(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),selectedFile=_useState2[0],setSelectedFile=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),transcription=_useState4[0],setTranscription=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isLoading=_useState6[0],setIsLoading=_useState6[1];var handleFileChange=function handleFileChange(event){setSelectedFile(event.target.files[0]);};var transcribeAndDownload=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var uploadUrlResponse,uploadUrlData,uploadUrl,payload,transcriptionResponse,transcriptionData,transcriptionId,status,statusResponse,statusData;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:setIsLoading(true);_context.prev=1;_context.next=4;return fetch(\"https://api.assemblyai.com/v2/upload-url\",{method:\"POST\",headers:{Authorization:\"6bdccc2045804a77b4ac2a5ba59a0e28\",// Replace with your AssemblyAI API token\n\"Content-Type\":\"application/json\"}});case 4:uploadUrlResponse=_context.sent;if(!(uploadUrlResponse.status!==200)){_context.next=7;break;}throw new Error(\"Failed to obtain upload URL.\");case 7:_context.next=9;return uploadUrlResponse.json();case 9:uploadUrlData=_context.sent;uploadUrl=uploadUrlData.upload_url;// Step 4: Create a JSON payload with the upload_url.\npayload={audio_url:uploadUrl};// Step 5: Make a POST request to the AssemblyAI API to start transcription.\n_context.next=14;return fetch(\"https://api.assemblyai.com/v2/upload\",{method:\"POST\",headers:{Authorization:\"6bdccc2045804a77b4ac2a5ba59a0e28\",// Replace with your AssemblyAI API token\n\"Content-Type\":\"application/json\"},body:JSON.stringify(payload)});case 14:transcriptionResponse=_context.sent;if(!(transcriptionResponse.status!==200)){_context.next=17;break;}throw new Error(\"Transcription request failed.\");case 17:_context.next=19;return transcriptionResponse.json();case 19:transcriptionData=_context.sent;transcriptionId=transcriptionData.id;// Step 6: Poll the API for the transcription status.\nstatus=\"\";case 22:if(!(status!==\"completed\")){_context.next=38;break;}_context.next=25;return fetch(\"https://api.assemblyai.com/v2/transcript/\".concat(transcriptionId),{headers:{Authorization:\"6bdccc2045804a77b4ac2a5ba59a0e28\"// Replace with your AssemblyAI API token\n}});case 25:statusResponse=_context.sent;_context.next=28;return statusResponse.json();case 28:statusData=_context.sent;status=statusData.status;if(!(status===\"completed\")){_context.next=34;break;}// Retrieve the transcript from the API response.\nsetTranscription(statusData.transcript);_context.next=36;break;case 34:_context.next=36;return new Promise(function(resolve){return setTimeout(resolve,3000);});case 36:_context.next=22;break;case 38:_context.next=43;break;case 40:_context.prev=40;_context.t0=_context[\"catch\"](1);// Handle errors here.\nconsole.error(\"Error:\",_context.t0);case 43:_context.prev=43;setIsLoading(false);return _context.finish(43);case 46:case\"end\":return _context.stop();}},_callee,null,[[1,40,43,46]]);}));return function transcribeAndDownload(){return _ref.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"AssemblyAI Audio Transcriber\"}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",accept:\"audio/*\",onChange:handleFileChange}),/*#__PURE__*/_jsx(\"button\",{onClick:transcribeAndDownload,disabled:!selectedFile||isLoading,children:isLoading?\"Transcribing...\":\"Transcribe and Download\"}),transcription&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Transcription Output\"}),/*#__PURE__*/_jsx(\"pre\",{children:transcription})]})]});};export default App;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","App","_useState","_useState2","_slicedToArray","selectedFile","setSelectedFile","_useState3","_useState4","transcription","setTranscription","_useState5","_useState6","isLoading","setIsLoading","handleFileChange","event","target","files","transcribeAndDownload","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","uploadUrlResponse","uploadUrlData","uploadUrl","payload","transcriptionResponse","transcriptionData","transcriptionId","status","statusResponse","statusData","wrap","_callee$","_context","prev","next","fetch","method","headers","Authorization","sent","Error","json","upload_url","audio_url","body","JSON","stringify","id","concat","transcript","Promise","resolve","setTimeout","t0","console","error","finish","stop","apply","arguments","children","type","accept","onChange","onClick","disabled"],"sources":["D:/Audio extractor/audio-extracter/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst App = () => {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [transcription, setTranscription] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleFileChange = (event) => {\n    setSelectedFile(event.target.files[0]);\n  };\n\n  const transcribeAndDownload = async () => {\n    setIsLoading(true);\n\n    try {\n      // Step 3: Upload the local file to the AssemblyAI API to get the upload_url.\n      const uploadUrlResponse = await fetch(\n        \"https://api.assemblyai.com/v2/upload-url\",\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: \"6bdccc2045804a77b4ac2a5ba59a0e28\", // Replace with your AssemblyAI API token\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n\n      if (uploadUrlResponse.status !== 200) {\n        throw new Error(\"Failed to obtain upload URL.\");\n      }\n\n      const uploadUrlData = await uploadUrlResponse.json();\n      const uploadUrl = uploadUrlData.upload_url;\n\n      // Step 4: Create a JSON payload with the upload_url.\n      const payload = {\n        audio_url: uploadUrl,\n      };\n\n      // Step 5: Make a POST request to the AssemblyAI API to start transcription.\n      const transcriptionResponse = await fetch(\n        \"https://api.assemblyai.com/v2/upload\",\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: \"6bdccc2045804a77b4ac2a5ba59a0e28\", // Replace with your AssemblyAI API token\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(payload),\n        }\n      );\n\n      if (transcriptionResponse.status !== 200) {\n        throw new Error(\"Transcription request failed.\");\n      }\n\n      const transcriptionData = await transcriptionResponse.json();\n      const transcriptionId = transcriptionData.id;\n\n      // Step 6: Poll the API for the transcription status.\n      let status = \"\";\n      while (status !== \"completed\") {\n        const statusResponse = await fetch(\n          `https://api.assemblyai.com/v2/transcript/${transcriptionId}`,\n          {\n            headers: {\n              Authorization: \"6bdccc2045804a77b4ac2a5ba59a0e28\", // Replace with your AssemblyAI API token\n            },\n          }\n        );\n        const statusData = await statusResponse.json();\n        status = statusData.status;\n\n        if (status === \"completed\") {\n          // Retrieve the transcript from the API response.\n          setTranscription(statusData.transcript);\n        } else {\n          // Sleep for a few seconds before checking the status again.\n          await new Promise((resolve) => setTimeout(resolve, 3000));\n        }\n      }\n    } catch (error) {\n      // Handle errors here.\n      console.error(\"Error:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <h2>AssemblyAI Audio Transcriber</h2>\n      <input type=\"file\" accept=\"audio/*\" onChange={handleFileChange} />\n      <button\n        onClick={transcribeAndDownload}\n        disabled={!selectedFile || isLoading}\n      >\n        {isLoading ? \"Transcribing...\" : \"Transcribe and Download\"}\n      </button>\n      {transcription && (\n        <div>\n          <h3>Transcription Output</h3>\n          <pre>{transcription}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}