{"ast":null,"code":"var _jsxFileName = \"D:\\\\Audio extractor\\\\audio-extracter\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AssemblyAIExample = () => {\n  _s();\n  const [transcription, setTranscription] = useState(\"\");\n  const [selectedFile, setSelectedFile] = useState(null);\n  const handleFileChange = event => {\n    setSelectedFile(event.target.files[0]);\n  };\n  const transcribeAndDownload = async () => {\n    if (!selectedFile) {\n      alert(\"Please select an audio file.\");\n      return;\n    }\n    const apiKey = \"6bdccc2045804a77b4ac2a5ba59a0e28\"; // Replace with your AssemblyAI API key\n\n    const formData = new FormData();\n    formData.append(\"file\", selectedFile);\n    try {\n      const uploadResponse = await axios.post(\"https://api.assemblyai.com/v2/upload\", formData, {\n        headers: {\n          Authorization: apiKey,\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      const {\n        id\n      } = uploadResponse.data;\n      let completed = false;\n      let transcript = \"\";\n      while (!completed) {\n        const transcriptResponse = await axios.get(`https://api.assemblyai.com/v2/transcript/${id}`, {\n          headers: {\n            Authorization: apiKey\n          }\n        });\n        if (transcriptResponse.data.status === \"completed\") {\n          completed = true;\n          transcript = transcriptResponse.data.text;\n        } else {\n          // Sleep or use a timer before the next poll (e.g., setTimeout)\n        }\n      }\n      setTranscription(transcript);\n\n      // Create a Blob with the transcribed text and trigger a download\n      const blob = new Blob([transcription], {\n        type: \"text/plain\"\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"transcription.txt\";\n      a.click();\n    } catch (error) {\n      console.error(\"Transcription error:\", error);\n      alert(\"An error occurred during transcription.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Audio Transcription and Download\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".mp3\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: transcribeAndDownload,\n      children: \"Transcribe & Download\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: transcription && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Transcribed Text:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: transcription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(AssemblyAIExample, \"W2eAJ9w8fUgvtsnL24HqdvGeM58=\");\n_c = AssemblyAIExample;\nexport default AssemblyAIExample;\nvar _c;\n$RefreshReg$(_c, \"AssemblyAIExample\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","AssemblyAIExample","_s","transcription","setTranscription","selectedFile","setSelectedFile","handleFileChange","event","target","files","transcribeAndDownload","alert","apiKey","formData","FormData","append","uploadResponse","post","headers","Authorization","id","data","completed","transcript","transcriptResponse","get","status","text","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","click","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","onClick","_c","$RefreshReg$"],"sources":["D:/Audio extractor/audio-extracter/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nconst AssemblyAIExample = () => {\n  const [transcription, setTranscription] = useState(\"\");\n  const [selectedFile, setSelectedFile] = useState(null);\n\n  const handleFileChange = (event) => {\n    setSelectedFile(event.target.files[0]);\n  };\n\n  const transcribeAndDownload = async () => {\n    if (!selectedFile) {\n      alert(\"Please select an audio file.\");\n      return;\n    }\n\n    const apiKey = \"6bdccc2045804a77b4ac2a5ba59a0e28\"; // Replace with your AssemblyAI API key\n\n    const formData = new FormData();\n    formData.append(\"file\", selectedFile);\n\n    try {\n      const uploadResponse = await axios.post(\n        \"https://api.assemblyai.com/v2/upload\",\n        formData,\n        {\n          headers: {\n            Authorization: apiKey,\n            \"Content-Type\": \"multipart/form-data\",\n          },\n        }\n      );\n\n      const { id } = uploadResponse.data;\n\n      let completed = false;\n      let transcript = \"\";\n\n      while (!completed) {\n        const transcriptResponse = await axios.get(\n          `https://api.assemblyai.com/v2/transcript/${id}`,\n          {\n            headers: {\n              Authorization: apiKey,\n            },\n          }\n        );\n\n        if (transcriptResponse.data.status === \"completed\") {\n          completed = true;\n          transcript = transcriptResponse.data.text;\n        } else {\n          // Sleep or use a timer before the next poll (e.g., setTimeout)\n        }\n      }\n\n      setTranscription(transcript);\n\n      // Create a Blob with the transcribed text and trigger a download\n      const blob = new Blob([transcription], { type: \"text/plain\" });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"transcription.txt\";\n      a.click();\n    } catch (error) {\n      console.error(\"Transcription error:\", error);\n      alert(\"An error occurred during transcription.\");\n    }\n  };\n\n  return (\n    <div>\n      <h1>Audio Transcription and Download</h1>\n      <input type=\"file\" accept=\".mp3\" onChange={handleFileChange} />\n      <button onClick={transcribeAndDownload}>Transcribe & Download</button>\n      <div>\n        {transcription && (\n          <div>\n            <h2>Transcribed Text:</h2>\n            <p>{transcription}</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AssemblyAIExample;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}