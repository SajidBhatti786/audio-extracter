{"ast":null,"code":"var _jsxFileName = \"D:\\\\Audio extractor\\\\audio-extracter\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst assemblyApi = axios.create({\n  baseURL: \"https://api.assemblyai.com/v2\",\n  headers: {\n    authorization: \"6bdccc2045804a77b4ac2a5ba59a0e28\",\n    // Replace with your actual API key\n    \"content-type\": \"application/json\"\n  }\n});\nconst initialState = {\n  url: null,\n  blob: null,\n  chunks: null,\n  duration: {\n    h: 0,\n    m: 0,\n    s: 0\n  }\n};\nfunction App() {\n  _s();\n  const [audioDetails, setAudioDetails] = useState(initialState);\n  const [transcript, setTranscript] = useState({\n    id: \"\",\n    text: \"\",\n    status: \"\"\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [audioFile, setAudioFile] = useState(null);\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    // ... (unchanged code for interval polling)\n  }, [isLoading, transcript]);\n  const handleAudioStop = data => {\n    setAudioDetails(data);\n  };\n  const handleReset = () => {\n    setAudioDetails({\n      ...initialState\n    });\n    setTranscript({\n      id: \"\",\n      text: \"\",\n      status: \"\"\n    });\n    setError(\"\");\n  };\n  const handleAudioUpload = event => {\n    const file = event.target.files[0];\n    setAudioFile(file);\n  };\n  const handleTranscribeAndDownload = async () => {\n    if (audioFile) {\n      setIsLoading(true);\n      setError(\"\"); // Reset any previous errors\n\n      const formData = new FormData();\n      formData.append(\"file\", audioFile);\n      try {\n        const {\n          data: uploadResponse\n        } = await assemblyApi.post(\"/upload\", formData);\n        const {\n          data\n        } = await assemblyApi.post(\"/transcript\", {\n          audio_url: uploadResponse.upload_url,\n          speaker_labels: true,\n          sentiment_analysis: true,\n          entity_detection: true,\n          iab_categories: true\n        });\n        const checkTranscriptionStatus = async () => {\n          const {\n            data: statusData\n          } = await assemblyApi.get(`/transcript/${data.id}`);\n          if (statusData.status === \"completed\") {\n            // Transcription was successful\n            setTranscript({\n              id: data.id,\n              text: statusData.text,\n              status: statusData.status\n            });\n            clearInterval(polling);\n          } else if (statusData.status === \"failed\") {\n            // Transcription failed\n            setTranscript({\n              id: data.id,\n              text: \"\",\n              status: statusData.status\n            });\n            setError(\"Transcription failed. Please try again.\");\n            clearInterval(polling);\n          } else if (statusData.status === \"queued\") {\n            // Transcription is in the queue\n            setTranscript({\n              id: data.id,\n              text: \"\",\n              status: statusData.status\n            });\n            // Display a \"Job in Queue, Please Wait\" message\n            /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Job in queue. please wait\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 13\n            }, this);\n          }\n          // Continue polling until the transcription is completed or failed\n        };\n\n        const pollingInterval = 5000; // Poll every 5 seconds\n        const polling = setInterval(checkTranscriptionStatus, pollingInterval);\n      } catch (error) {\n        setError(\"An error occurred during transcription.\");\n        console.error(error);\n      } finally {\n        setIsLoading(false);\n      }\n    } else {\n      setError(\"Please select an audio file.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      fontSize: \"xl\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        minHeight: \"50vh\",\n        padding: \"30px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"8px\"\n        },\n        children: [transcript.text ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Transcription:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: transcript.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: isLoading ? \"Transcription in progress. Please wait...\" : transcript.status === \"failed\" ? \"Transcription failed. Please try again.\" : transcript.status === \"queued\" ? \"Job in Queue, Please Wait...\" : \"Transcription not yet completed.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: \"red\"\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".mp3, .wav\",\n          onChange: handleAudioUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleTranscribeAndDownload,\n          children: \"Transcribe and Download\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleReset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"300px\",\n          paddingTop: \"-1\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"n3AHlswwhtF7aZD6A3nePXZGGFQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","assemblyApi","create","baseURL","headers","authorization","initialState","url","blob","chunks","duration","h","m","s","App","_s","audioDetails","setAudioDetails","transcript","setTranscript","id","text","status","isLoading","setIsLoading","audioFile","setAudioFile","error","setError","handleAudioStop","data","handleReset","handleAudioUpload","event","file","target","files","handleTranscribeAndDownload","formData","FormData","append","uploadResponse","post","audio_url","upload_url","speaker_labels","sentiment_analysis","entity_detection","iab_categories","checkTranscriptionStatus","statusData","get","clearInterval","polling","children","fileName","_jsxFileName","lineNumber","columnNumber","pollingInterval","setInterval","console","style","textAlign","fontSize","minHeight","padding","marginBottom","color","type","accept","onChange","onClick","width","paddingTop","_c","$RefreshReg$"],"sources":["D:/Audio extractor/audio-extracter/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst assemblyApi = axios.create({\n  baseURL: \"https://api.assemblyai.com/v2\",\n  headers: {\n    authorization: \"6bdccc2045804a77b4ac2a5ba59a0e28\", // Replace with your actual API key\n    \"content-type\": \"application/json\",\n  },\n});\n\nconst initialState = {\n  url: null,\n  blob: null,\n  chunks: null,\n  duration: {\n    h: 0,\n    m: 0,\n    s: 0,\n  },\n};\n\nfunction App() {\n  const [audioDetails, setAudioDetails] = useState(initialState);\n  const [transcript, setTranscript] = useState({\n    id: \"\",\n    text: \"\",\n    status: \"\",\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [audioFile, setAudioFile] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    // ... (unchanged code for interval polling)\n  }, [isLoading, transcript]);\n\n  const handleAudioStop = (data) => {\n    setAudioDetails(data);\n  };\n\n  const handleReset = () => {\n    setAudioDetails({ ...initialState });\n    setTranscript({ id: \"\", text: \"\", status: \"\" });\n    setError(\"\");\n  };\n\n  const handleAudioUpload = (event) => {\n    const file = event.target.files[0];\n    setAudioFile(file);\n  };\n\n  const handleTranscribeAndDownload = async () => {\n    if (audioFile) {\n      setIsLoading(true);\n      setError(\"\"); // Reset any previous errors\n\n      const formData = new FormData();\n      formData.append(\"file\", audioFile);\n\n      try {\n        const { data: uploadResponse } = await assemblyApi.post(\n          \"/upload\",\n          formData\n        );\n\n        const { data } = await assemblyApi.post(\"/transcript\", {\n          audio_url: uploadResponse.upload_url,\n          speaker_labels: true,\n          sentiment_analysis: true,\n          entity_detection: true,\n          iab_categories: true,\n        });\n\n        const checkTranscriptionStatus = async () => {\n          const { data: statusData } = await assemblyApi.get(\n            `/transcript/${data.id}`\n          );\n          if (statusData.status === \"completed\") {\n            // Transcription was successful\n            setTranscript({\n              id: data.id,\n              text: statusData.text,\n              status: statusData.status,\n            });\n            clearInterval(polling);\n          } else if (statusData.status === \"failed\") {\n            // Transcription failed\n            setTranscript({ id: data.id, text: \"\", status: statusData.status });\n            setError(\"Transcription failed. Please try again.\");\n            clearInterval(polling);\n          } else if (statusData.status === \"queued\") {\n            // Transcription is in the queue\n            setTranscript({ id: data.id, text: \"\", status: statusData.status });\n            // Display a \"Job in Queue, Please Wait\" message\n            <p>Job in queue. please wait</p>;\n          }\n          // Continue polling until the transcription is completed or failed\n        };\n\n        const pollingInterval = 5000; // Poll every 5 seconds\n        const polling = setInterval(checkTranscriptionStatus, pollingInterval);\n      } catch (error) {\n        setError(\"An error occurred during transcription.\");\n        console.error(error);\n      } finally {\n        setIsLoading(false);\n      }\n    } else {\n      setError(\"Please select an audio file.\");\n    }\n  };\n\n  return (\n    <div style={{ textAlign: \"center\", fontSize: \"xl\" }}>\n      <div\n        style={{\n          minHeight: \"50vh\",\n          padding: \"30px\",\n        }}\n      >\n        <div style={{ marginBottom: \"8px\" }}>\n          {transcript.text ? (\n            <div>\n              <p>Transcription:</p>\n              <p>{transcript.text}</p>\n            </div>\n          ) : (\n            <p>\n              {isLoading\n                ? \"Transcription in progress. Please wait...\"\n                : transcript.status === \"failed\"\n                ? \"Transcription failed. Please try again.\"\n                : transcript.status === \"queued\"\n                ? \"Job in Queue, Please Wait...\"\n                : \"Transcription not yet completed.\"}\n            </p>\n          )}\n          {error && <p style={{ color: \"red\" }}>{error}</p>}\n        </div>\n\n        <div>\n          <input type=\"file\" accept=\".mp3, .wav\" onChange={handleAudioUpload} />\n        </div>\n\n        <div>\n          <button onClick={handleTranscribeAndDownload}>\n            Transcribe and Download\n          </button>\n          <button onClick={handleReset}>Reset</button>\n        </div>\n\n        <div style={{ width: \"300px\", paddingTop: \"-1\" }}>\n          {/* Your Recorder component */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}