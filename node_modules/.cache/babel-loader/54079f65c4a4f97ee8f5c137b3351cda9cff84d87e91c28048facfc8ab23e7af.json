{"ast":null,"code":"var _jsxFileName = \"D:\\\\Audio extractor\\\\audio-extracter\\\\src\\\\App.js\";\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n\n// const baseUrl = \"https://api.assemblyai.com/v2\"; // Replace with the correct API endpoint\n// const apiKey = \"6bdccc2045804a77b4ac2a5ba59a0e28\"; // Replace with your actual API key\n\n// const headers = {\n//   authorization: apiKey,\n//   \"content-type\": \"audio/mpeg\", // Set the correct content type for your audio file\n// };\n\n// const assemblyApi = axios.create({\n//   baseURL: baseUrl,\n//   headers: headers,\n// });\n\n// const initialState = {\n//   url: null,\n//   blob: null,\n//   chunks: null,\n//   duration: {\n//     h: 0,\n//     m: 0,\n//     s: 0,\n//   },\n// };\n\n// let polling;\n\nimport axios from \"axios\";\nimport fs from \"fs-extra\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const App = async () => {\n  const baseUrl = \"https://api.assemblyai.com/v2\";\n  const headers = {\n    authorization: \"6bdccc2045804a77b4ac2a5ba59a0e28\"\n  };\n  const path = \"./my-audio.mp3\";\n  const audioData = await fs.readFile(path);\n  const uploadResponse = await axios.post(`${baseUrl}/upload`, audioData, {\n    headers\n  });\n  const uploadUrl = uploadResponse.data.upload_url;\n  const data = {\n    audio_url: uploadUrl // You can also use a URL to an audio or video file on the web\n  };\n\n  const url = `${baseUrl}/transcript`;\n  const response = await axios.post(url, data, {\n    headers: headers\n  });\n  const transcriptId = response.data.id;\n  const pollingEndpoint = `${baseUrl}/transcript/${transcriptId}`;\n  while (true) {\n    const pollingResponse = await axios.get(pollingEndpoint, {\n      headers: headers\n    });\n    const transcriptionResult = pollingResponse.data;\n    if (transcriptionResult.status === \"completed\") {\n      console.log(transcriptionResult.text);\n      break;\n    } else if (transcriptionResult.status === \"error\") {\n      throw new Error(`Transcription failed: ${transcriptionResult.error}`);\n    } else {\n      await new Promise(resolve => setTimeout(resolve, 3000));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n  // const [audioDetails, setAudioDetails] = useState(initialState);\n  // const [transcript, setTranscript] = useState({\n  //   id: \"\",\n  //   text: \"\",\n  //   status: \"\",\n  // });\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState(\"\");\n  // const [audioFile, setAudioFile] = useState(null);\n\n  // useEffect(() => {\n  //   // ... (unchanged code for interval polling)\n  // }, [isLoading, transcript]);\n\n  // const checkTranscriptionStatus = async (transcriptionId) => {\n  //   try {\n  //     const { data } = await assemblyApi.get(`/transcript/${transcriptionId}`);\n  //     console.log(data);\n  //     if (data.status === \"completed\") {\n  //       setTranscript({\n  //         id: data.id,\n  //         text: data.text,\n  //         status: data.status,\n  //       });\n  //       console.log(\"completed\");\n  //       clearInterval(polling);\n  //     } else if (data.status === \"error\") {\n  //       setTranscript({ id: data.id, text: \"\", status: data.status });\n  //       setError(\"Transcription failed. Please try again.\");\n  //       console.log(\"failed\");\n  //       clearInterval(polling);\n  //     } else if (\n  //       data.status === \"queued\" ||\n  //       data.status === \"processing\" ||\n  //       data.status === \"throttled\"\n  //     ) {\n  //       console.log(\"queued\");\n  //       setTranscript({ id: data.id, text: \"\", status: data.status });\n  //     } else {\n  //       console.log(\"else\");\n  //       setTranscript({ id: data.id, text: \"\", status: data.status });\n  //     }\n  //   } catch (error) {\n  //     console.error(error);\n  //   }\n  // };\n\n  // const handleAudioStop = (data) => {\n  //   setAudioDetails(data);\n  // };\n\n  // const handleReset = () => {\n  //   setAudioDetails({ ...initialState });\n  //   setTranscript({ id: \"\", text: \"\", status: \"\" });\n  //   setError(\"\");\n  // };\n\n  // const handleAudioUpload = (event) => {\n  //   const file = event.target.files[0];\n  //   setAudioFile(file);\n  // };\n\n  // const handleTranscribeAndDownload = async () => {\n  //   if (audioFile) {\n  //     setIsLoading(true);\n  //     setError(\"\"); // Reset any previous errors\n\n  //     const fileReader = new FileReader();\n\n  //     fileReader.onload = async () => {\n  //       const audioData = fileReader.result;\n\n  //       try {\n  //         // Send the audio data to the upload endpoint\n  //         const uploadResponse = await axios.post(\n  //           `${baseUrl}/upload`,\n  //           audioData,\n  //           {\n  //             headers,\n  //           }\n  //         );\n\n  //         const { data } = await axios.post(`${baseUrl}/transcript`, {\n  //           audio_url: uploadResponse.data.upload_url,\n  //           speaker_labels: true,\n  //           sentiment_analysis: true,\n  //           entity_detection: true,\n  //           iab_categories: true,\n  //         });\n\n  //         const pollingInterval = 5000; // Poll every 5 seconds\n  //         polling = setInterval(\n  //           () => checkTranscriptionStatus(data.id),\n  //           pollingInterval\n  //         );\n  //       } catch (error) {\n  //         setError(\"An error occurred during transcription.\");\n  //         console.error(error);\n  //       } finally {\n  //         setIsLoading(false);\n  //       }\n  //     };\n\n  //     fileReader.readAsArrayBuffer(audioFile);\n  //   } else {\n  //     setError(\"Please select an audio file.\");\n  //   }\n  // };\n\n  // return (\n  //   <div style={{ textAlign: \"center\", fontSize: \"xl\" }}>\n  //     <div\n  //       style={{\n  //         minHeight: \"50vh\",\n  //         padding: \"30px\",\n  //       }}\n  //     >\n  //       <div style={{ marginBottom: \"8px\" }}>\n  //         {transcript.text ? (\n  //           <div>\n  //             <p>Transcription:</p>\n  //             <p>{transcript.text}</p>\n  //           </div>\n  //         ) : (\n  //           <p>\n  //             {isLoading\n  //               ? \"Transcription in progress. Please wait...\"\n  //               : transcript.status === \"failed\"\n  //               ? \"Transcription failed. Please try again.\"\n  //               : transcript.status === \"queued\"\n  //               ? \"Job in Queue, Please Wait...\"\n  //               : \"Transcription not yet completed.\"}\n  //           </p>\n  //         )}\n  //         {error && <p style={{ color: \"red\" }}>{error}</p>}\n  //       </div>\n\n  //       <div>\n  //         <input type=\"file\" accept=\".mp3, .wav\" onChange={handleAudioUpload} />\n  //       </div>\n\n  //       <div>\n  //         <button onClick={handleTranscribeAndDownload}>\n  //           Transcribe and Download\n  //         </button>\n  //         <button onClick={handleReset}>Reset</button>\n  //       </div>\n\n  //       <div style={{ width: \"300px\", paddingTop: \"-1\" }}>\n  //         {/* Your Recorder component */}\n  //       </div>\n  //     </div>\n  //   </div>\n  // );\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["axios","fs","jsxDEV","_jsxDEV","App","baseUrl","headers","authorization","path","audioData","readFile","uploadResponse","post","uploadUrl","data","upload_url","audio_url","url","response","transcriptId","id","pollingEndpoint","pollingResponse","get","transcriptionResult","status","console","log","text","Error","error","Promise","resolve","setTimeout","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Audio extractor/audio-extracter/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n\n// const baseUrl = \"https://api.assemblyai.com/v2\"; // Replace with the correct API endpoint\n// const apiKey = \"6bdccc2045804a77b4ac2a5ba59a0e28\"; // Replace with your actual API key\n\n// const headers = {\n//   authorization: apiKey,\n//   \"content-type\": \"audio/mpeg\", // Set the correct content type for your audio file\n// };\n\n// const assemblyApi = axios.create({\n//   baseURL: baseUrl,\n//   headers: headers,\n// });\n\n// const initialState = {\n//   url: null,\n//   blob: null,\n//   chunks: null,\n//   duration: {\n//     h: 0,\n//     m: 0,\n//     s: 0,\n//   },\n// };\n\n// let polling;\n\nimport axios from \"axios\";\nimport fs from \"fs-extra\";\nexport const App = async () => {\n  const baseUrl = \"https://api.assemblyai.com/v2\";\n\n  const headers = {\n    authorization: \"6bdccc2045804a77b4ac2a5ba59a0e28\",\n  };\n  const path = \"./my-audio.mp3\";\n  const audioData = await fs.readFile(path);\n  const uploadResponse = await axios.post(`${baseUrl}/upload`, audioData, {\n    headers,\n  });\n  const uploadUrl = uploadResponse.data.upload_url;\n\n  const data = {\n    audio_url: uploadUrl, // You can also use a URL to an audio or video file on the web\n  };\n  const url = `${baseUrl}/transcript`;\n  const response = await axios.post(url, data, { headers: headers });\n  const transcriptId = response.data.id;\n  const pollingEndpoint = `${baseUrl}/transcript/${transcriptId}`;\n\n  while (true) {\n    const pollingResponse = await axios.get(pollingEndpoint, {\n      headers: headers,\n    });\n    const transcriptionResult = pollingResponse.data;\n\n    if (transcriptionResult.status === \"completed\") {\n      console.log(transcriptionResult.text);\n      break;\n    } else if (transcriptionResult.status === \"error\") {\n      throw new Error(`Transcription failed: ${transcriptionResult.error}`);\n    } else {\n      await new Promise((resolve) => setTimeout(resolve, 3000));\n    }\n  }\n  return (\n    <div>\n      <h1>hello</h1>\n    </div>\n  );\n  // const [audioDetails, setAudioDetails] = useState(initialState);\n  // const [transcript, setTranscript] = useState({\n  //   id: \"\",\n  //   text: \"\",\n  //   status: \"\",\n  // });\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState(\"\");\n  // const [audioFile, setAudioFile] = useState(null);\n\n  // useEffect(() => {\n  //   // ... (unchanged code for interval polling)\n  // }, [isLoading, transcript]);\n\n  // const checkTranscriptionStatus = async (transcriptionId) => {\n  //   try {\n  //     const { data } = await assemblyApi.get(`/transcript/${transcriptionId}`);\n  //     console.log(data);\n  //     if (data.status === \"completed\") {\n  //       setTranscript({\n  //         id: data.id,\n  //         text: data.text,\n  //         status: data.status,\n  //       });\n  //       console.log(\"completed\");\n  //       clearInterval(polling);\n  //     } else if (data.status === \"error\") {\n  //       setTranscript({ id: data.id, text: \"\", status: data.status });\n  //       setError(\"Transcription failed. Please try again.\");\n  //       console.log(\"failed\");\n  //       clearInterval(polling);\n  //     } else if (\n  //       data.status === \"queued\" ||\n  //       data.status === \"processing\" ||\n  //       data.status === \"throttled\"\n  //     ) {\n  //       console.log(\"queued\");\n  //       setTranscript({ id: data.id, text: \"\", status: data.status });\n  //     } else {\n  //       console.log(\"else\");\n  //       setTranscript({ id: data.id, text: \"\", status: data.status });\n  //     }\n  //   } catch (error) {\n  //     console.error(error);\n  //   }\n  // };\n\n  // const handleAudioStop = (data) => {\n  //   setAudioDetails(data);\n  // };\n\n  // const handleReset = () => {\n  //   setAudioDetails({ ...initialState });\n  //   setTranscript({ id: \"\", text: \"\", status: \"\" });\n  //   setError(\"\");\n  // };\n\n  // const handleAudioUpload = (event) => {\n  //   const file = event.target.files[0];\n  //   setAudioFile(file);\n  // };\n\n  // const handleTranscribeAndDownload = async () => {\n  //   if (audioFile) {\n  //     setIsLoading(true);\n  //     setError(\"\"); // Reset any previous errors\n\n  //     const fileReader = new FileReader();\n\n  //     fileReader.onload = async () => {\n  //       const audioData = fileReader.result;\n\n  //       try {\n  //         // Send the audio data to the upload endpoint\n  //         const uploadResponse = await axios.post(\n  //           `${baseUrl}/upload`,\n  //           audioData,\n  //           {\n  //             headers,\n  //           }\n  //         );\n\n  //         const { data } = await axios.post(`${baseUrl}/transcript`, {\n  //           audio_url: uploadResponse.data.upload_url,\n  //           speaker_labels: true,\n  //           sentiment_analysis: true,\n  //           entity_detection: true,\n  //           iab_categories: true,\n  //         });\n\n  //         const pollingInterval = 5000; // Poll every 5 seconds\n  //         polling = setInterval(\n  //           () => checkTranscriptionStatus(data.id),\n  //           pollingInterval\n  //         );\n  //       } catch (error) {\n  //         setError(\"An error occurred during transcription.\");\n  //         console.error(error);\n  //       } finally {\n  //         setIsLoading(false);\n  //       }\n  //     };\n\n  //     fileReader.readAsArrayBuffer(audioFile);\n  //   } else {\n  //     setError(\"Please select an audio file.\");\n  //   }\n  // };\n\n  // return (\n  //   <div style={{ textAlign: \"center\", fontSize: \"xl\" }}>\n  //     <div\n  //       style={{\n  //         minHeight: \"50vh\",\n  //         padding: \"30px\",\n  //       }}\n  //     >\n  //       <div style={{ marginBottom: \"8px\" }}>\n  //         {transcript.text ? (\n  //           <div>\n  //             <p>Transcription:</p>\n  //             <p>{transcript.text}</p>\n  //           </div>\n  //         ) : (\n  //           <p>\n  //             {isLoading\n  //               ? \"Transcription in progress. Please wait...\"\n  //               : transcript.status === \"failed\"\n  //               ? \"Transcription failed. Please try again.\"\n  //               : transcript.status === \"queued\"\n  //               ? \"Job in Queue, Please Wait...\"\n  //               : \"Transcription not yet completed.\"}\n  //           </p>\n  //         )}\n  //         {error && <p style={{ color: \"red\" }}>{error}</p>}\n  //       </div>\n\n  //       <div>\n  //         <input type=\"file\" accept=\".mp3, .wav\" onChange={handleAudioUpload} />\n  //       </div>\n\n  //       <div>\n  //         <button onClick={handleTranscribeAndDownload}>\n  //           Transcribe and Download\n  //         </button>\n  //         <button onClick={handleReset}>Reset</button>\n  //       </div>\n\n  //       <div style={{ width: \"300px\", paddingTop: \"-1\" }}>\n  //         {/* Your Recorder component */}\n  //       </div>\n  //     </div>\n  //   </div>\n  // );\n};\n\nexport default App;\n"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,EAAE,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1B,OAAO,MAAMC,GAAG,GAAG,MAAAA,CAAA,KAAY;EAC7B,MAAMC,OAAO,GAAG,+BAA+B;EAE/C,MAAMC,OAAO,GAAG;IACdC,aAAa,EAAE;EACjB,CAAC;EACD,MAAMC,IAAI,GAAG,gBAAgB;EAC7B,MAAMC,SAAS,GAAG,MAAMR,EAAE,CAACS,QAAQ,CAACF,IAAI,CAAC;EACzC,MAAMG,cAAc,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAE,GAAEP,OAAQ,SAAQ,EAAEI,SAAS,EAAE;IACtEH;EACF,CAAC,CAAC;EACF,MAAMO,SAAS,GAAGF,cAAc,CAACG,IAAI,CAACC,UAAU;EAEhD,MAAMD,IAAI,GAAG;IACXE,SAAS,EAAEH,SAAS,CAAE;EACxB,CAAC;;EACD,MAAMI,GAAG,GAAI,GAAEZ,OAAQ,aAAY;EACnC,MAAMa,QAAQ,GAAG,MAAMlB,KAAK,CAACY,IAAI,CAACK,GAAG,EAAEH,IAAI,EAAE;IAAER,OAAO,EAAEA;EAAQ,CAAC,CAAC;EAClE,MAAMa,YAAY,GAAGD,QAAQ,CAACJ,IAAI,CAACM,EAAE;EACrC,MAAMC,eAAe,GAAI,GAAEhB,OAAQ,eAAcc,YAAa,EAAC;EAE/D,OAAO,IAAI,EAAE;IACX,MAAMG,eAAe,GAAG,MAAMtB,KAAK,CAACuB,GAAG,CAACF,eAAe,EAAE;MACvDf,OAAO,EAAEA;IACX,CAAC,CAAC;IACF,MAAMkB,mBAAmB,GAAGF,eAAe,CAACR,IAAI;IAEhD,IAAIU,mBAAmB,CAACC,MAAM,KAAK,WAAW,EAAE;MAC9CC,OAAO,CAACC,GAAG,CAACH,mBAAmB,CAACI,IAAI,CAAC;MACrC;IACF,CAAC,MAAM,IAAIJ,mBAAmB,CAACC,MAAM,KAAK,OAAO,EAAE;MACjD,MAAM,IAAII,KAAK,CAAE,yBAAwBL,mBAAmB,CAACM,KAAM,EAAC,CAAC;IACvE,CAAC,MAAM;MACL,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;IAC3D;EACF;EACA,oBACE7B,OAAA;IAAA+B,QAAA,eACE/B,OAAA;MAAA+B,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;EAER;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC;AAACC,EAAA,GAnMWnC,GAAG;AAqMhB,eAAeA,GAAG;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}