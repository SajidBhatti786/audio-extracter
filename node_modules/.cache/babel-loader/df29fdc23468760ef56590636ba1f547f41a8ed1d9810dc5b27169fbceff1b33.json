{"ast":null,"code":"var _jsxFileName = \"D:\\\\Audio extractor\\\\audio-extracter\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // AssemblyAI API\n  const assembly = axios.create({\n    baseURL: \"https://api.assemblyai.com/v2\",\n    headers: {\n      authorization: \"cd610432583949c2b0404f55a064ec75\",\n      \"content-type\": \"application/json\",\n      \"transfer-encoding\": \"chunked\"\n    }\n  });\n\n  // State variables\n  const [transcript, setTranscript] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Handle file selection\n  const handleFileChange = async event => {\n    const selectedFile = event.target.files[0];\n    if (!selectedFile) {\n      alert(\"Please select an audio file.\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"audio\", selectedFile);\n    try {\n      const uploadResponse = await assembly.post(\"/upload\", selectedFile);\n      if (uploadResponse.status === 200) {\n        const uploadURL = uploadResponse.data.upload_url;\n        submitTranscription(uploadURL);\n      } else {\n        alert(\"File upload to AssemblyAI failed.\");\n      }\n    } catch (error) {\n      console.error(error);\n      alert(\"An error occurred while uploading the file.\");\n    }\n  };\n  const submitTranscription = uploadURL => {\n    setIsLoading(true);\n    assembly.post(\"/transcript\", {\n      audio_url: uploadURL\n    }).then(response => {\n      const transcriptID = response.data.id;\n      checkTranscriptionStatus(transcriptID);\n    }).catch(error => {\n      console.error(error);\n      alert(\"Transcription request to AssemblyAI failed.\");\n    });\n  };\n  const checkTranscriptionStatus = transcriptID => {\n    const interval = setInterval(async () => {\n      try {\n        const response = await assembly.get(`/transcript/${transcriptID}`);\n        const transcriptData = response.data;\n        if (transcriptData.status === \"completed\") {\n          clearInterval(interval);\n          setIsLoading(false);\n          setTranscript(transcriptData.text);\n        }\n      } catch (error) {\n        console.error(error);\n        alert(\"An error occurred while checking transcription status.\");\n      }\n    }, 1000);\n  };\n  const downloadTranscript = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([transcript], {\n      type: \"text/plain\"\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = \"transcript.txt\";\n    element.click();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Audio Transcription App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"audio/*\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Transcribing...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 20\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: transcript\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 45\n    }, this), transcript && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: downloadTranscript,\n      children: \"Download Transcript\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Yb8vrqF6cc35zBGS7GxfyHcsTyg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","assembly","create","baseURL","headers","authorization","transcript","setTranscript","isLoading","setIsLoading","handleFileChange","event","selectedFile","target","files","alert","formData","FormData","append","uploadResponse","post","status","uploadURL","data","upload_url","submitTranscription","error","console","audio_url","then","response","transcriptID","id","checkTranscriptionStatus","catch","interval","setInterval","get","transcriptData","clearInterval","text","downloadTranscript","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","click","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","onClick","_c","$RefreshReg$"],"sources":["D:/Audio extractor/audio-extracter/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nconst App = () => {\n  // AssemblyAI API\n  const assembly = axios.create({\n    baseURL: \"https://api.assemblyai.com/v2\",\n    headers: {\n      authorization: \"cd610432583949c2b0404f55a064ec75\",\n      \"content-type\": \"application/json\",\n      \"transfer-encoding\": \"chunked\",\n    },\n  });\n\n  // State variables\n  const [transcript, setTranscript] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Handle file selection\n  const handleFileChange = async (event) => {\n    const selectedFile = event.target.files[0];\n\n    if (!selectedFile) {\n      alert(\"Please select an audio file.\");\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"audio\", selectedFile);\n\n    try {\n      const uploadResponse = await assembly.post(\"/upload\", selectedFile);\n\n      if (uploadResponse.status === 200) {\n        const uploadURL = uploadResponse.data.upload_url;\n\n        submitTranscription(uploadURL);\n      } else {\n        alert(\"File upload to AssemblyAI failed.\");\n      }\n    } catch (error) {\n      console.error(error);\n      alert(\"An error occurred while uploading the file.\");\n    }\n  };\n\n  const submitTranscription = (uploadURL) => {\n    setIsLoading(true);\n    assembly\n      .post(\"/transcript\", { audio_url: uploadURL })\n      .then((response) => {\n        const transcriptID = response.data.id;\n        checkTranscriptionStatus(transcriptID);\n      })\n      .catch((error) => {\n        console.error(error);\n        alert(\"Transcription request to AssemblyAI failed.\");\n      });\n  };\n\n  const checkTranscriptionStatus = (transcriptID) => {\n    const interval = setInterval(async () => {\n      try {\n        const response = await assembly.get(`/transcript/${transcriptID}`);\n        const transcriptData = response.data;\n\n        if (transcriptData.status === \"completed\") {\n          clearInterval(interval);\n          setIsLoading(false);\n          setTranscript(transcriptData.text);\n        }\n      } catch (error) {\n        console.error(error);\n        alert(\"An error occurred while checking transcription status.\");\n      }\n    }, 1000);\n  };\n  const downloadTranscript = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([transcript], { type: \"text/plain\" });\n    element.href = URL.createObjectURL(file);\n    element.download = \"transcript.txt\";\n    element.click();\n  };\n  return (\n    <div>\n      <h1>Audio Transcription App</h1>\n      <input type=\"file\" accept=\"audio/*\" onChange={handleFileChange} />\n      {isLoading ? <p>Transcribing...</p> : <p>{transcript}</p>}\n\n      {transcript && (\n        <button onClick={downloadTranscript}>Download Transcript</button>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}