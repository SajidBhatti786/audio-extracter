{"ast":null,"code":"var _jsxFileName = \"D:\\\\Audio extractor\\\\audio-extracter\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioTranscription = () => {\n  _s();\n  const APIKey = \"6bdccc2045804a77b4ac2a5ba59a0e28\";\n  const refreshInterval = 5000;\n  const [transcriptText, setTranscriptText] = useState(\"\");\n  const [transcriptStatus, setTranscriptStatus] = useState(\"pending\");\n  const [selectedFile, setSelectedFile] = useState(null);\n  const handleFileChange = event => {\n    setSelectedFile(event.target.files[0]);\n  };\n  useEffect(() => {\n    const assembly = axios.create({\n      baseURL: \"https://api.assemblyai.com/v2\",\n      headers: {\n        authorization: APIKey,\n        \"content-type\": \"application/json\"\n      }\n    });\n    const getTranscript = async () => {\n      if (!selectedFile) {\n        return;\n      }\n      try {\n        // Upload the selected audio file to AssemblyAI for transcription\n        const formData = new FormData();\n        console.log(selectedFile);\n        formData.append(\"file\", selectedFile);\n        const response = await assembly.post(\"/upload\", formData);\n        console.log(response);\n        // Interval for checking transcript completion\n        const checkCompletionInterval = setInterval(async () => {\n          const transcript = await assembly.get(`/transcript/${response.upload_url}`);\n          console.log(\"transcript is: \", transcript);\n          const transcriptStatus = transcript.data.status;\n          if (transcriptStatus !== \"completed\") {\n            setTranscriptStatus(transcriptStatus);\n          } else {\n            setTranscriptStatus(\"completed\");\n            clearInterval(checkCompletionInterval);\n            setTranscriptText(transcript.data.text);\n          }\n        }, refreshInterval);\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    };\n    getTranscript();\n  }, [selectedFile]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Transcription Status: \", transcriptStatus]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"audio/*\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), transcriptStatus === \"completed\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Transcription completed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Your transcribed text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: transcriptText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioTranscription, \"nHv5XwyAgg8jzhDFCOSGNfRrt/k=\");\n_c = AudioTranscription;\nexport default AudioTranscription;\nvar _c;\n$RefreshReg$(_c, \"AudioTranscription\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","AudioTranscription","_s","APIKey","refreshInterval","transcriptText","setTranscriptText","transcriptStatus","setTranscriptStatus","selectedFile","setSelectedFile","handleFileChange","event","target","files","assembly","create","baseURL","headers","authorization","getTranscript","formData","FormData","console","log","append","response","post","checkCompletionInterval","setInterval","transcript","get","upload_url","data","status","clearInterval","text","error","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","_c","$RefreshReg$"],"sources":["D:/Audio extractor/audio-extracter/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst AudioTranscription = () => {\n  const APIKey = \"6bdccc2045804a77b4ac2a5ba59a0e28\";\n  const refreshInterval = 5000;\n\n  const [transcriptText, setTranscriptText] = useState(\"\");\n  const [transcriptStatus, setTranscriptStatus] = useState(\"pending\");\n  const [selectedFile, setSelectedFile] = useState(null);\n\n  const handleFileChange = (event) => {\n    setSelectedFile(event.target.files[0]);\n  };\n\n  useEffect(() => {\n    const assembly = axios.create({\n      baseURL: \"https://api.assemblyai.com/v2\",\n      headers: {\n        authorization: APIKey,\n        \"content-type\": \"application/json\",\n      },\n    });\n\n    const getTranscript = async () => {\n      if (!selectedFile) {\n        return;\n      }\n\n      try {\n        // Upload the selected audio file to AssemblyAI for transcription\n        const formData = new FormData();\n        console.log(selectedFile);\n        formData.append(\"file\", selectedFile);\n\n        const response = await assembly.post(\"/upload\", formData);\n        console.log(response);\n        // Interval for checking transcript completion\n        const checkCompletionInterval = setInterval(async () => {\n          const transcript = await assembly.get(\n            `/transcript/${response.upload_url}`\n          );\n          console.log(\"transcript is: \", transcript);\n          const transcriptStatus = transcript.data.status;\n\n          if (transcriptStatus !== \"completed\") {\n            setTranscriptStatus(transcriptStatus);\n          } else {\n            setTranscriptStatus(\"completed\");\n            clearInterval(checkCompletionInterval);\n            setTranscriptText(transcript.data.text);\n          }\n        }, refreshInterval);\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    };\n\n    getTranscript();\n  }, [selectedFile]);\n\n  return (\n    <div>\n      <h2>Transcription Status: {transcriptStatus}</h2>\n      <input type=\"file\" accept=\"audio/*\" onChange={handleFileChange} />\n      {transcriptStatus === \"completed\" && (\n        <div>\n          <h2>Transcription completed!</h2>\n          <p>Your transcribed text:</p>\n          <p>{transcriptText}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AudioTranscription;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}