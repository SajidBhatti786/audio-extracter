{"ast":null,"code":"var _jsxFileName = \"D:\\\\Audio extractor\\\\audio-extracter\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [transcription, setTranscription] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const handleFileChange = event => {\n    setSelectedFile(event.target.files[0]);\n  };\n  const transcribeAndDownload = async () => {\n    setIsLoading(true);\n    try {\n      // Step 3: Upload the local file to the AssemblyAI API to get the upload_url.\n      const uploadUrlResponse = await fetch(\"https://api.assemblyai.com/v2/upload-url\", {\n        method: \"POST\",\n        headers: {\n          Authorization: \"cd610432583949c2b0404f55a064ec75\",\n          // Replace with your AssemblyAI API token\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (uploadUrlResponse.status !== 200) {\n        throw new Error(\"Failed to obtain upload URL.\");\n      }\n      const uploadUrlData = await uploadUrlResponse.json();\n      const uploadUrl = uploadUrlData.upload_url;\n\n      // Step 4: Create a JSON payload with the upload_url.\n      const payload = {\n        audio_url: uploadUrl\n      };\n\n      // Step 5: Make a POST request to the AssemblyAI API to start transcription.\n      const transcriptionResponse = await fetch(\"https://api.assemblyai.com/v2/upload\", {\n        method: \"POST\",\n        headers: {\n          Authorization: \"cd610432583949c2b0404f55a064ec75\",\n          // Replace with your AssemblyAI API token\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (transcriptionResponse.status !== 200) {\n        throw new Error(\"Transcription request failed.\");\n      }\n      const transcriptionData = await transcriptionResponse.json();\n      const transcriptionId = transcriptionData.id;\n\n      // Step 6: Poll the API for the transcription status.\n      let status = \"\";\n      while (status !== \"completed\") {\n        const statusResponse = await fetch(`https://api.assemblyai.com/v2/transcript/${transcriptionId}`, {\n          headers: {\n            Authorization: \"cd610432583949c2b0404f55a064ec75\" // Replace with your AssemblyAI API token\n          }\n        });\n\n        const statusData = await statusResponse.json();\n        status = statusData.status;\n        if (status === \"completed\") {\n          // Retrieve the transcript from the API response.\n          setTranscription(statusData.transcript);\n        } else {\n          // Sleep for a few seconds before checking the status again.\n          await new Promise(resolve => setTimeout(resolve, 3000));\n        }\n      }\n    } catch (error) {\n      // Handle errors here.\n      console.error(\"Error:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"AssemblyAI Audio Transcriber\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"audio/*\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: transcribeAndDownload,\n      disabled: !selectedFile || isLoading,\n      children: isLoading ? \"Transcribing...\" : \"Transcribe and Download\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), transcription && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Transcription Output\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: transcription\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Iu/5EMK/1QxPxABUIUxSA9EUGdg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","selectedFile","setSelectedFile","transcription","setTranscription","isLoading","setIsLoading","handleFileChange","event","target","files","transcribeAndDownload","uploadUrlResponse","fetch","method","headers","Authorization","status","Error","uploadUrlData","json","uploadUrl","upload_url","payload","audio_url","transcriptionResponse","body","JSON","stringify","transcriptionData","transcriptionId","id","statusResponse","statusData","transcript","Promise","resolve","setTimeout","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/Audio extractor/audio-extracter/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst App = () => {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [transcription, setTranscription] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleFileChange = (event) => {\n    setSelectedFile(event.target.files[0]);\n  };\n\n  const transcribeAndDownload = async () => {\n    setIsLoading(true);\n\n    try {\n      // Step 3: Upload the local file to the AssemblyAI API to get the upload_url.\n      const uploadUrlResponse = await fetch(\n        \"https://api.assemblyai.com/v2/upload-url\",\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: \"cd610432583949c2b0404f55a064ec75\", // Replace with your AssemblyAI API token\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n\n      if (uploadUrlResponse.status !== 200) {\n        throw new Error(\"Failed to obtain upload URL.\");\n      }\n\n      const uploadUrlData = await uploadUrlResponse.json();\n      const uploadUrl = uploadUrlData.upload_url;\n\n      // Step 4: Create a JSON payload with the upload_url.\n      const payload = {\n        audio_url: uploadUrl,\n      };\n\n      // Step 5: Make a POST request to the AssemblyAI API to start transcription.\n      const transcriptionResponse = await fetch(\n        \"https://api.assemblyai.com/v2/upload\",\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: \"cd610432583949c2b0404f55a064ec75\", // Replace with your AssemblyAI API token\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(payload),\n        }\n      );\n\n      if (transcriptionResponse.status !== 200) {\n        throw new Error(\"Transcription request failed.\");\n      }\n\n      const transcriptionData = await transcriptionResponse.json();\n      const transcriptionId = transcriptionData.id;\n\n      // Step 6: Poll the API for the transcription status.\n      let status = \"\";\n      while (status !== \"completed\") {\n        const statusResponse = await fetch(\n          `https://api.assemblyai.com/v2/transcript/${transcriptionId}`,\n          {\n            headers: {\n              Authorization: \"cd610432583949c2b0404f55a064ec75\", // Replace with your AssemblyAI API token\n            },\n          }\n        );\n        const statusData = await statusResponse.json();\n        status = statusData.status;\n\n        if (status === \"completed\") {\n          // Retrieve the transcript from the API response.\n          setTranscription(statusData.transcript);\n        } else {\n          // Sleep for a few seconds before checking the status again.\n          await new Promise((resolve) => setTimeout(resolve, 3000));\n        }\n      }\n    } catch (error) {\n      // Handle errors here.\n      console.error(\"Error:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <h2>AssemblyAI Audio Transcriber</h2>\n      <input type=\"file\" accept=\"audio/*\" onChange={handleFileChange} />\n      <button\n        onClick={transcribeAndDownload}\n        disabled={!selectedFile || isLoading}\n      >\n        {isLoading ? \"Transcribing...\" : \"Transcribe and Download\"}\n      </button>\n      {transcription && (\n        <div>\n          <h3>Transcription Output</h3>\n          <pre>{transcription}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMW,gBAAgB,GAAIC,KAAK,IAAK;IAClCN,eAAe,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EACxC,CAAC;EAED,MAAMC,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACxCL,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACF;MACA,MAAMM,iBAAiB,GAAG,MAAMC,KAAK,CACnC,0CAA0C,EAC1C;QACEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACPC,aAAa,EAAE,kCAAkC;UAAE;UACnD,cAAc,EAAE;QAClB;MACF,CACF,CAAC;MAED,IAAIJ,iBAAiB,CAACK,MAAM,KAAK,GAAG,EAAE;QACpC,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;MACjD;MAEA,MAAMC,aAAa,GAAG,MAAMP,iBAAiB,CAACQ,IAAI,CAAC,CAAC;MACpD,MAAMC,SAAS,GAAGF,aAAa,CAACG,UAAU;;MAE1C;MACA,MAAMC,OAAO,GAAG;QACdC,SAAS,EAAEH;MACb,CAAC;;MAED;MACA,MAAMI,qBAAqB,GAAG,MAAMZ,KAAK,CACvC,sCAAsC,EACtC;QACEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACPC,aAAa,EAAE,kCAAkC;UAAE;UACnD,cAAc,EAAE;QAClB,CAAC;QACDU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;MAC9B,CACF,CAAC;MAED,IAAIE,qBAAqB,CAACR,MAAM,KAAK,GAAG,EAAE;QACxC,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;MAClD;MAEA,MAAMW,iBAAiB,GAAG,MAAMJ,qBAAqB,CAACL,IAAI,CAAC,CAAC;MAC5D,MAAMU,eAAe,GAAGD,iBAAiB,CAACE,EAAE;;MAE5C;MACA,IAAId,MAAM,GAAG,EAAE;MACf,OAAOA,MAAM,KAAK,WAAW,EAAE;QAC7B,MAAMe,cAAc,GAAG,MAAMnB,KAAK,CAC/B,4CAA2CiB,eAAgB,EAAC,EAC7D;UACEf,OAAO,EAAE;YACPC,aAAa,EAAE,kCAAkC,CAAE;UACrD;QACF,CACF,CAAC;;QACD,MAAMiB,UAAU,GAAG,MAAMD,cAAc,CAACZ,IAAI,CAAC,CAAC;QAC9CH,MAAM,GAAGgB,UAAU,CAAChB,MAAM;QAE1B,IAAIA,MAAM,KAAK,WAAW,EAAE;UAC1B;UACAb,gBAAgB,CAAC6B,UAAU,CAACC,UAAU,CAAC;QACzC,CAAC,MAAM;UACL;UACA,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;QAC3D;MACF;IACF,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd;MACAC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC,CAAC,SAAS;MACRhC,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,oBACER,OAAA;IAAA0C,QAAA,gBACE1C,OAAA;MAAA0C,QAAA,EAAI;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrC9C,OAAA;MAAO+C,IAAI,EAAC,MAAM;MAACC,MAAM,EAAC,SAAS;MAACC,QAAQ,EAAExC;IAAiB;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClE9C,OAAA;MACEkD,OAAO,EAAErC,qBAAsB;MAC/BsC,QAAQ,EAAE,CAAChD,YAAY,IAAII,SAAU;MAAAmC,QAAA,EAEpCnC,SAAS,GAAG,iBAAiB,GAAG;IAAyB;MAAAoC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD,CAAC,EACRzC,aAAa,iBACZL,OAAA;MAAA0C,QAAA,gBACE1C,OAAA;QAAA0C,QAAA,EAAI;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC7B9C,OAAA;QAAA0C,QAAA,EAAMrC;MAAa;QAAAsC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC5C,EAAA,CAzGID,GAAG;AAAAmD,EAAA,GAAHnD,GAAG;AA2GT,eAAeA,GAAG;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}