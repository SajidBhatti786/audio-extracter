{"ast":null,"code":"var _jsxFileName = \"D:\\\\Audio extractor\\\\audio-extracter\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioTranscription = () => {\n  _s();\n  const audioURL = \"https://bit.ly/3yxKEIY\";\n  const APIKey = \"ASSEMBLYAI-API-KEY\";\n  const refreshInterval = 5000;\n  const [transcriptText, setTranscriptText] = useState(\"\");\n  const [transcriptStatus, setTranscriptStatus] = useState(\"pending\");\n  useEffect(() => {\n    const assembly = axios.create({\n      baseURL: \"https://api.assemblyai.com/v2\",\n      headers: {\n        authorization: APIKey,\n        \"content-type\": \"application/json\"\n      }\n    });\n    const getTranscript = async () => {\n      try {\n        // Sends the audio file to AssemblyAI for transcription\n        const response = await assembly.post(\"/transcript\", {\n          audio_url: audioURL\n        });\n\n        // Interval for checking transcript completion\n        const checkCompletionInterval = setInterval(async () => {\n          const transcript = await assembly.get(`/transcript/${response.data.id}`);\n          const transcriptStatus = transcript.data.status;\n          if (transcriptStatus !== \"completed\") {\n            setTranscriptStatus(transcriptStatus);\n          } else {\n            setTranscriptStatus(\"completed\");\n            clearInterval(checkCompletionInterval);\n            setTranscriptText(transcript.data.text);\n          }\n        }, refreshInterval);\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    };\n    getTranscript();\n  }, []); // Empty dependency array to run the effect once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Transcription Status: \", transcriptStatus]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), transcriptStatus === \"completed\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Transcription completed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Your transcribed text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: transcriptText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioTranscription, \"s7qPc6UX9eMv9CPCrC6YM5W2w90=\");\n_c = AudioTranscription;\nexport default AudioTranscription;\nvar _c;\n$RefreshReg$(_c, \"AudioTranscription\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","AudioTranscription","_s","audioURL","APIKey","refreshInterval","transcriptText","setTranscriptText","transcriptStatus","setTranscriptStatus","assembly","create","baseURL","headers","authorization","getTranscript","response","post","audio_url","checkCompletionInterval","setInterval","transcript","get","data","id","status","clearInterval","text","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Audio extractor/audio-extracter/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst AudioTranscription = () => {\n  const audioURL = \"https://bit.ly/3yxKEIY\";\n  const APIKey = \"ASSEMBLYAI-API-KEY\";\n  const refreshInterval = 5000;\n\n  const [transcriptText, setTranscriptText] = useState(\"\");\n  const [transcriptStatus, setTranscriptStatus] = useState(\"pending\");\n\n  useEffect(() => {\n    const assembly = axios.create({\n      baseURL: \"https://api.assemblyai.com/v2\",\n      headers: {\n        authorization: APIKey,\n        \"content-type\": \"application/json\",\n      },\n    });\n\n    const getTranscript = async () => {\n      try {\n        // Sends the audio file to AssemblyAI for transcription\n        const response = await assembly.post(\"/transcript\", {\n          audio_url: audioURL,\n        });\n\n        // Interval for checking transcript completion\n        const checkCompletionInterval = setInterval(async () => {\n          const transcript = await assembly.get(\n            `/transcript/${response.data.id}`\n          );\n          const transcriptStatus = transcript.data.status;\n\n          if (transcriptStatus !== \"completed\") {\n            setTranscriptStatus(transcriptStatus);\n          } else {\n            setTranscriptStatus(\"completed\");\n            clearInterval(checkCompletionInterval);\n            setTranscriptText(transcript.data.text);\n          }\n        }, refreshInterval);\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    };\n\n    getTranscript();\n  }, []); // Empty dependency array to run the effect once\n\n  return (\n    <div>\n      <h2>Transcription Status: {transcriptStatus}</h2>\n      {transcriptStatus === \"completed\" && (\n        <div>\n          <h2>Transcription completed!</h2>\n          <p>Your transcribed text:</p>\n          <p>{transcriptText}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AudioTranscription;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAMC,QAAQ,GAAG,wBAAwB;EACzC,MAAMC,MAAM,GAAG,oBAAoB;EACnC,MAAMC,eAAe,GAAG,IAAI;EAE5B,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACW,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGZ,QAAQ,CAAC,SAAS,CAAC;EAEnED,SAAS,CAAC,MAAM;IACd,MAAMc,QAAQ,GAAGZ,KAAK,CAACa,MAAM,CAAC;MAC5BC,OAAO,EAAE,+BAA+B;MACxCC,OAAO,EAAE;QACPC,aAAa,EAAEV,MAAM;QACrB,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,MAAMW,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,aAAa,EAAE;UAClDC,SAAS,EAAEf;QACb,CAAC,CAAC;;QAEF;QACA,MAAMgB,uBAAuB,GAAGC,WAAW,CAAC,YAAY;UACtD,MAAMC,UAAU,GAAG,MAAMX,QAAQ,CAACY,GAAG,CAClC,eAAcN,QAAQ,CAACO,IAAI,CAACC,EAAG,EAClC,CAAC;UACD,MAAMhB,gBAAgB,GAAGa,UAAU,CAACE,IAAI,CAACE,MAAM;UAE/C,IAAIjB,gBAAgB,KAAK,WAAW,EAAE;YACpCC,mBAAmB,CAACD,gBAAgB,CAAC;UACvC,CAAC,MAAM;YACLC,mBAAmB,CAAC,WAAW,CAAC;YAChCiB,aAAa,CAACP,uBAAuB,CAAC;YACtCZ,iBAAiB,CAACc,UAAU,CAACE,IAAI,CAACI,IAAI,CAAC;UACzC;QACF,CAAC,EAAEtB,eAAe,CAAC;MACrB,CAAC,CAAC,OAAOuB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC;IACF,CAAC;IAEDb,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEf,OAAA;IAAA8B,QAAA,gBACE9B,OAAA;MAAA8B,QAAA,GAAI,wBAAsB,EAACtB,gBAAgB;IAAA;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAChD1B,gBAAgB,KAAK,WAAW,iBAC/BR,OAAA;MAAA8B,QAAA,gBACE9B,OAAA;QAAA8B,QAAA,EAAI;MAAwB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjClC,OAAA;QAAA8B,QAAA,EAAG;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC7BlC,OAAA;QAAA8B,QAAA,EAAIxB;MAAc;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAChC,EAAA,CA3DID,kBAAkB;AAAAkC,EAAA,GAAlBlC,kBAAkB;AA6DxB,eAAeA,kBAAkB;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}